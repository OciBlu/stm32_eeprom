ARM GAS  /tmp/cc6wK56V.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB70:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "string.h"
  25:Core/Src/main.c **** #include "stdio.h"
  26:Core/Src/main.c **** #include "ssd1306_fonts.h"
  27:Core/Src/main.c **** #include "ssd1306_tests.h"
  28:Core/Src/main.c **** #include "ssd1306.h"
  29:Core/Src/main.c **** #include "bitmap.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** #include "stm32f1xx_hal_i2c.h"
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  /tmp/cc6wK56V.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** UART_HandleTypeDef huart1;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** #define EEPROM_ADDR (0xA0 << 1)
  57:Core/Src/main.c **** uint8_t Data_Write[10] = "T";
  58:Core/Src/main.c **** uint8_t Data_Read[10];
  59:Core/Src/main.c **** char data_memori[25];
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** uint8_t Buffer[25] = {0};
  62:Core/Src/main.c **** uint8_t Space[] = " - ";
  63:Core/Src/main.c **** uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
  64:Core/Src/main.c **** uint8_t EndMSG[] = "Done! \r\n\r\n";
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE END PV */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  69:Core/Src/main.c **** void SystemClock_Config(void);
  70:Core/Src/main.c **** static void MX_GPIO_Init(void);
  71:Core/Src/main.c **** static void MX_I2C1_Init(void);
  72:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* USER CODE END 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /**
  83:Core/Src/main.c ****   * @brief  The application entry point.
  84:Core/Src/main.c ****   * @retval int
  85:Core/Src/main.c ****   */
  86:Core/Src/main.c **** int main(void)
  87:Core/Src/main.c **** {
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  90:Core/Src/main.c ****   uint8_t i = 0, ret;
ARM GAS  /tmp/cc6wK56V.s 			page 3


  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END 1 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Core/Src/main.c ****   HAL_Init();
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 100:Core/Src/main.c ****   HAL_Delay(100); // tambahkan delay untuk auto reset supaya bisa auto run
 101:Core/Src/main.c ****   /* USER CODE END Init */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Configure the system clock */
 104:Core/Src/main.c ****   SystemClock_Config();
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END SysInit */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Initialize all configured peripherals */
 111:Core/Src/main.c ****   MX_GPIO_Init();
 112:Core/Src/main.c ****   MX_I2C1_Init();
 113:Core/Src/main.c ****   MX_USART1_UART_Init();
 114:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 115:Core/Src/main.c ****   HAL_Delay(1000);
 116:Core/Src/main.c ****  
 117:Core/Src/main.c ****     /*-[ I2C Bus Scanning ]-*/
 118:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 119:Core/Src/main.c ****     for(i=1; i<128; i++)
 120:Core/Src/main.c ****     {
 121:Core/Src/main.c ****         ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 122:Core/Src/main.c ****         if (ret != HAL_OK) /* No ACK Received At That Address */
 123:Core/Src/main.c ****         {
 124:Core/Src/main.c ****             HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 125:Core/Src/main.c ****         }
 126:Core/Src/main.c ****         else if(ret == HAL_OK)
 127:Core/Src/main.c ****         {
 128:Core/Src/main.c ****             sprintf(Buffer, "0x%X", i);
 129:Core/Src/main.c ****             HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 130:Core/Src/main.c ****         }
 131:Core/Src/main.c ****     }
 132:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 133:Core/Src/main.c ****     /*--[ Scanning Done ]--*/
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /*
 137:Core/Src/main.c ****   //HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t M
 138:Core/Src/main.c ****   HAL_I2C_Mem_Write(&hi2c1, (0xA0 << 1), 0, 2, Data_Write, sizeof(Data_Write), HAL_MAX_DELAY);
 139:Core/Src/main.c ****   HAL_Delay(1000);
 140:Core/Src/main.c ****   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (0xA0 << 1) | 0x00 , 0, 2, Data_Read, sizeof(
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   if (status == HAL_OK){
 143:Core/Src/main.c ****     sprintf(data_memori, "data: %hhn ", Data_Read);
 144:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 145:Core/Src/main.c ****     HAL_Delay(5);
 146:Core/Src/main.c ****   }
 147:Core/Src/main.c ****   else {
ARM GAS  /tmp/cc6wK56V.s 			page 4


 148:Core/Src/main.c ****     sprintf(data_memori, "memori error! \r\n");
 149:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 150:Core/Src/main.c ****     HAL_Delay(5);
 151:Core/Src/main.c ****   }
 152:Core/Src/main.c ****   */
 153:Core/Src/main.c ****  
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* USER CODE END 2 */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* Infinite loop */
 158:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 159:Core/Src/main.c ****   while (1)
 160:Core/Src/main.c ****   {
 161:Core/Src/main.c ****     /* USER CODE END WHILE */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c ****   /* USER CODE END 3 */
 166:Core/Src/main.c **** }
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** /**
 169:Core/Src/main.c ****   * @brief System Clock Configuration
 170:Core/Src/main.c ****   * @retval None
 171:Core/Src/main.c ****   */
 172:Core/Src/main.c **** void SystemClock_Config(void)
 173:Core/Src/main.c **** {
 174:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 175:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 178:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 179:Core/Src/main.c ****   */
 180:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 181:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 182:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 183:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 186:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 187:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****     Error_Handler();
 190:Core/Src/main.c ****   }
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 193:Core/Src/main.c ****   */
 194:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 195:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 196:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 197:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 199:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 202:Core/Src/main.c ****   {
 203:Core/Src/main.c ****     Error_Handler();
 204:Core/Src/main.c ****   }
ARM GAS  /tmp/cc6wK56V.s 			page 5


 205:Core/Src/main.c **** }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c **** /**
 208:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 209:Core/Src/main.c ****   * @param None
 210:Core/Src/main.c ****   * @retval None
 211:Core/Src/main.c ****   */
 212:Core/Src/main.c **** static void MX_I2C1_Init(void)
 213:Core/Src/main.c **** {
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 222:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 223:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 224:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 225:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 226:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 227:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 228:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 229:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 230:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 231:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c **** }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** /**
 242:Core/Src/main.c ****   * @brief USART1 Initialization Function
 243:Core/Src/main.c ****   * @param None
 244:Core/Src/main.c ****   * @retval None
 245:Core/Src/main.c ****   */
 246:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 247:Core/Src/main.c **** {
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 256:Core/Src/main.c ****   huart1.Instance = USART1;
 257:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 258:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 259:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 260:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 261:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/cc6wK56V.s 			page 6


 262:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 263:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 264:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 265:Core/Src/main.c ****   {
 266:Core/Src/main.c ****     Error_Handler();
 267:Core/Src/main.c ****   }
 268:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** }
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** /**
 275:Core/Src/main.c ****   * @brief GPIO Initialization Function
 276:Core/Src/main.c ****   * @param None
 277:Core/Src/main.c ****   * @retval None
 278:Core/Src/main.c ****   */
 279:Core/Src/main.c **** static void MX_GPIO_Init(void)
 280:Core/Src/main.c **** {
  26              		.loc 1 280 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 84B0     		sub	sp, sp, #16
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
 281:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 282:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 285:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  34              		.loc 1 285 3 view .LVU1
  35              	.LBB4:
  36              		.loc 1 285 3 view .LVU2
  37              		.loc 1 285 3 view .LVU3
  38 0002 0F4B     		ldr	r3, .L3
  39 0004 9A69     		ldr	r2, [r3, #24]
  40 0006 42F02002 		orr	r2, r2, #32
  41 000a 9A61     		str	r2, [r3, #24]
  42              		.loc 1 285 3 view .LVU4
  43 000c 9A69     		ldr	r2, [r3, #24]
  44 000e 02F02002 		and	r2, r2, #32
  45 0012 0192     		str	r2, [sp, #4]
  46              		.loc 1 285 3 view .LVU5
  47 0014 019A     		ldr	r2, [sp, #4]
  48              	.LBE4:
  49              		.loc 1 285 3 view .LVU6
 286:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  50              		.loc 1 286 3 view .LVU7
  51              	.LBB5:
  52              		.loc 1 286 3 view .LVU8
  53              		.loc 1 286 3 view .LVU9
  54 0016 9A69     		ldr	r2, [r3, #24]
  55 0018 42F00402 		orr	r2, r2, #4
  56 001c 9A61     		str	r2, [r3, #24]
  57              		.loc 1 286 3 view .LVU10
ARM GAS  /tmp/cc6wK56V.s 			page 7


  58 001e 9A69     		ldr	r2, [r3, #24]
  59 0020 02F00402 		and	r2, r2, #4
  60 0024 0292     		str	r2, [sp, #8]
  61              		.loc 1 286 3 view .LVU11
  62 0026 029A     		ldr	r2, [sp, #8]
  63              	.LBE5:
  64              		.loc 1 286 3 view .LVU12
 287:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  65              		.loc 1 287 3 view .LVU13
  66              	.LBB6:
  67              		.loc 1 287 3 view .LVU14
  68              		.loc 1 287 3 view .LVU15
  69 0028 9A69     		ldr	r2, [r3, #24]
  70 002a 42F00802 		orr	r2, r2, #8
  71 002e 9A61     		str	r2, [r3, #24]
  72              		.loc 1 287 3 view .LVU16
  73 0030 9B69     		ldr	r3, [r3, #24]
  74 0032 03F00803 		and	r3, r3, #8
  75 0036 0393     		str	r3, [sp, #12]
  76              		.loc 1 287 3 view .LVU17
  77 0038 039B     		ldr	r3, [sp, #12]
  78              	.LBE6:
  79              		.loc 1 287 3 view .LVU18
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 290:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 291:Core/Src/main.c **** }
  80              		.loc 1 291 1 is_stmt 0 view .LVU19
  81 003a 04B0     		add	sp, sp, #16
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 0
  84              		@ sp needed
  85 003c 7047     		bx	lr
  86              	.L4:
  87 003e 00BF     		.align	2
  88              	.L3:
  89 0040 00100240 		.word	1073876992
  90              		.cfi_endproc
  91              	.LFE70:
  93              		.section	.text.Error_Handler,"ax",%progbits
  94              		.align	1
  95              		.global	Error_Handler
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	Error_Handler:
 102              	.LFB71:
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** /* USER CODE END 4 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c **** /**
 298:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 299:Core/Src/main.c ****   * @retval None
 300:Core/Src/main.c ****   */
ARM GAS  /tmp/cc6wK56V.s 			page 8


 301:Core/Src/main.c **** void Error_Handler(void)
 302:Core/Src/main.c **** {
 103              		.loc 1 302 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ Volatile: function does not return.
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 303:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 304:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 305:Core/Src/main.c ****   __disable_irq();
 109              		.loc 1 305 3 view .LVU21
 110              	.LBB7:
 111              	.LBI7:
 112              		.file 2 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  /tmp/cc6wK56V.s 			page 9


  43:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 113              		.loc 2 69 57 view .LVU22
 114              	.LBB8:
  70:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 115              		.loc 2 71 3 view .LVU23
 116              		.syntax unified
 117              	@ 71 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h" 1
 118 0000 72B6     		cpsid i
 119              	@ 0 "" 2
 120              		.thumb
 121              		.syntax unified
 122              	.L6:
 123              	.LBE8:
 124              	.LBE7:
 306:Core/Src/main.c ****   while (1)
 125              		.loc 1 306 3 discriminator 1 view .LVU24
 307:Core/Src/main.c ****   {
 308:Core/Src/main.c ****   }
 126              		.loc 1 308 3 discriminator 1 view .LVU25
 306:Core/Src/main.c ****   while (1)
 127              		.loc 1 306 9 discriminator 1 view .LVU26
 128 0002 FEE7     		b	.L6
 129              		.cfi_endproc
 130              	.LFE71:
 132              		.section	.text.MX_I2C1_Init,"ax",%progbits
 133              		.align	1
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
ARM GAS  /tmp/cc6wK56V.s 			page 10


 139              	MX_I2C1_Init:
 140              	.LFB68:
 213:Core/Src/main.c **** 
 141              		.loc 1 213 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI2:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 222:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 150              		.loc 1 222 3 view .LVU28
 222:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 151              		.loc 1 222 18 is_stmt 0 view .LVU29
 152 0002 0A48     		ldr	r0, .L11
 153 0004 0A4B     		ldr	r3, .L11+4
 154 0006 0360     		str	r3, [r0]
 223:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 155              		.loc 1 223 3 is_stmt 1 view .LVU30
 223:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 156              		.loc 1 223 25 is_stmt 0 view .LVU31
 157 0008 0A4B     		ldr	r3, .L11+8
 158 000a 4360     		str	r3, [r0, #4]
 224:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 159              		.loc 1 224 3 is_stmt 1 view .LVU32
 224:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 160              		.loc 1 224 24 is_stmt 0 view .LVU33
 161 000c 0023     		movs	r3, #0
 162 000e 8360     		str	r3, [r0, #8]
 225:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 163              		.loc 1 225 3 is_stmt 1 view .LVU34
 225:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 164              		.loc 1 225 26 is_stmt 0 view .LVU35
 165 0010 C360     		str	r3, [r0, #12]
 226:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 166              		.loc 1 226 3 is_stmt 1 view .LVU36
 226:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 167              		.loc 1 226 29 is_stmt 0 view .LVU37
 168 0012 4FF48042 		mov	r2, #16384
 169 0016 0261     		str	r2, [r0, #16]
 227:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 170              		.loc 1 227 3 is_stmt 1 view .LVU38
 227:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 171              		.loc 1 227 30 is_stmt 0 view .LVU39
 172 0018 4361     		str	r3, [r0, #20]
 228:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 173              		.loc 1 228 3 is_stmt 1 view .LVU40
 228:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 174              		.loc 1 228 26 is_stmt 0 view .LVU41
 175 001a 8361     		str	r3, [r0, #24]
 229:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 176              		.loc 1 229 3 is_stmt 1 view .LVU42
 229:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 177              		.loc 1 229 30 is_stmt 0 view .LVU43
 178 001c C361     		str	r3, [r0, #28]
ARM GAS  /tmp/cc6wK56V.s 			page 11


 230:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 179              		.loc 1 230 3 is_stmt 1 view .LVU44
 230:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 180              		.loc 1 230 28 is_stmt 0 view .LVU45
 181 001e 0362     		str	r3, [r0, #32]
 231:Core/Src/main.c ****   {
 182              		.loc 1 231 3 is_stmt 1 view .LVU46
 231:Core/Src/main.c ****   {
 183              		.loc 1 231 7 is_stmt 0 view .LVU47
 184 0020 FFF7FEFF 		bl	HAL_I2C_Init
 185              	.LVL0:
 231:Core/Src/main.c ****   {
 186              		.loc 1 231 6 view .LVU48
 187 0024 00B9     		cbnz	r0, .L10
 239:Core/Src/main.c **** 
 188              		.loc 1 239 1 view .LVU49
 189 0026 08BD     		pop	{r3, pc}
 190              	.L10:
 233:Core/Src/main.c ****   }
 191              		.loc 1 233 5 is_stmt 1 view .LVU50
 192 0028 FFF7FEFF 		bl	Error_Handler
 193              	.LVL1:
 194              	.L12:
 195              		.align	2
 196              	.L11:
 197 002c 00000000 		.word	.LANCHOR0
 198 0030 00540040 		.word	1073763328
 199 0034 A0860100 		.word	100000
 200              		.cfi_endproc
 201              	.LFE68:
 203              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 204              		.align	1
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu softvfp
 210              	MX_USART1_UART_Init:
 211              	.LFB69:
 247:Core/Src/main.c **** 
 212              		.loc 1 247 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 08B5     		push	{r3, lr}
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 3, -8
 220              		.cfi_offset 14, -4
 256:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 221              		.loc 1 256 3 view .LVU52
 256:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 222              		.loc 1 256 19 is_stmt 0 view .LVU53
 223 0002 0A48     		ldr	r0, .L17
 224 0004 0A4B     		ldr	r3, .L17+4
 225 0006 0360     		str	r3, [r0]
 257:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 226              		.loc 1 257 3 is_stmt 1 view .LVU54
ARM GAS  /tmp/cc6wK56V.s 			page 12


 257:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 227              		.loc 1 257 24 is_stmt 0 view .LVU55
 228 0008 4FF4E133 		mov	r3, #115200
 229 000c 4360     		str	r3, [r0, #4]
 258:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 230              		.loc 1 258 3 is_stmt 1 view .LVU56
 258:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 231              		.loc 1 258 26 is_stmt 0 view .LVU57
 232 000e 0023     		movs	r3, #0
 233 0010 8360     		str	r3, [r0, #8]
 259:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 234              		.loc 1 259 3 is_stmt 1 view .LVU58
 259:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 235              		.loc 1 259 24 is_stmt 0 view .LVU59
 236 0012 C360     		str	r3, [r0, #12]
 260:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 237              		.loc 1 260 3 is_stmt 1 view .LVU60
 260:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 238              		.loc 1 260 22 is_stmt 0 view .LVU61
 239 0014 0361     		str	r3, [r0, #16]
 261:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 240              		.loc 1 261 3 is_stmt 1 view .LVU62
 261:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 241              		.loc 1 261 20 is_stmt 0 view .LVU63
 242 0016 0C22     		movs	r2, #12
 243 0018 4261     		str	r2, [r0, #20]
 262:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 244              		.loc 1 262 3 is_stmt 1 view .LVU64
 262:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 245              		.loc 1 262 25 is_stmt 0 view .LVU65
 246 001a 8361     		str	r3, [r0, #24]
 263:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 247              		.loc 1 263 3 is_stmt 1 view .LVU66
 263:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 248              		.loc 1 263 28 is_stmt 0 view .LVU67
 249 001c C361     		str	r3, [r0, #28]
 264:Core/Src/main.c ****   {
 250              		.loc 1 264 3 is_stmt 1 view .LVU68
 264:Core/Src/main.c ****   {
 251              		.loc 1 264 7 is_stmt 0 view .LVU69
 252 001e FFF7FEFF 		bl	HAL_UART_Init
 253              	.LVL2:
 264:Core/Src/main.c ****   {
 254              		.loc 1 264 6 view .LVU70
 255 0022 00B9     		cbnz	r0, .L16
 272:Core/Src/main.c **** 
 256              		.loc 1 272 1 view .LVU71
 257 0024 08BD     		pop	{r3, pc}
 258              	.L16:
 266:Core/Src/main.c ****   }
 259              		.loc 1 266 5 is_stmt 1 view .LVU72
 260 0026 FFF7FEFF 		bl	Error_Handler
 261              	.LVL3:
 262              	.L18:
 263 002a 00BF     		.align	2
 264              	.L17:
 265 002c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/cc6wK56V.s 			page 13


 266 0030 00380140 		.word	1073821696
 267              		.cfi_endproc
 268              	.LFE69:
 270              		.section	.text.SystemClock_Config,"ax",%progbits
 271              		.align	1
 272              		.global	SystemClock_Config
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	SystemClock_Config:
 279              	.LFB67:
 173:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 280              		.loc 1 173 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 64
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 00B5     		push	{lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 14, -4
 288 0002 91B0     		sub	sp, sp, #68
 289              	.LCFI5:
 290              		.cfi_def_cfa_offset 72
 174:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 291              		.loc 1 174 3 view .LVU74
 174:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 292              		.loc 1 174 22 is_stmt 0 view .LVU75
 293 0004 2822     		movs	r2, #40
 294 0006 0021     		movs	r1, #0
 295 0008 06A8     		add	r0, sp, #24
 296 000a FFF7FEFF 		bl	memset
 297              	.LVL4:
 175:Core/Src/main.c **** 
 298              		.loc 1 175 3 is_stmt 1 view .LVU76
 175:Core/Src/main.c **** 
 299              		.loc 1 175 22 is_stmt 0 view .LVU77
 300 000e 0023     		movs	r3, #0
 301 0010 0193     		str	r3, [sp, #4]
 302 0012 0293     		str	r3, [sp, #8]
 303 0014 0393     		str	r3, [sp, #12]
 304 0016 0493     		str	r3, [sp, #16]
 305 0018 0593     		str	r3, [sp, #20]
 180:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 306              		.loc 1 180 3 is_stmt 1 view .LVU78
 180:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 307              		.loc 1 180 36 is_stmt 0 view .LVU79
 308 001a 0122     		movs	r2, #1
 309 001c 0692     		str	r2, [sp, #24]
 181:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 310              		.loc 1 181 3 is_stmt 1 view .LVU80
 181:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 311              		.loc 1 181 30 is_stmt 0 view .LVU81
 312 001e 4FF48033 		mov	r3, #65536
 313 0022 0793     		str	r3, [sp, #28]
 182:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 314              		.loc 1 182 3 is_stmt 1 view .LVU82
ARM GAS  /tmp/cc6wK56V.s 			page 14


 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 315              		.loc 1 183 3 view .LVU83
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 316              		.loc 1 183 30 is_stmt 0 view .LVU84
 317 0024 0A92     		str	r2, [sp, #40]
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 318              		.loc 1 184 3 is_stmt 1 view .LVU85
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 319              		.loc 1 184 34 is_stmt 0 view .LVU86
 320 0026 0222     		movs	r2, #2
 321 0028 0D92     		str	r2, [sp, #52]
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 322              		.loc 1 185 3 is_stmt 1 view .LVU87
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 323              		.loc 1 185 35 is_stmt 0 view .LVU88
 324 002a 0E93     		str	r3, [sp, #56]
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 325              		.loc 1 186 3 is_stmt 1 view .LVU89
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 326              		.loc 1 186 32 is_stmt 0 view .LVU90
 327 002c 4FF4E013 		mov	r3, #1835008
 328 0030 0F93     		str	r3, [sp, #60]
 187:Core/Src/main.c ****   {
 329              		.loc 1 187 3 is_stmt 1 view .LVU91
 187:Core/Src/main.c ****   {
 330              		.loc 1 187 7 is_stmt 0 view .LVU92
 331 0032 06A8     		add	r0, sp, #24
 332 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 333              	.LVL5:
 187:Core/Src/main.c ****   {
 334              		.loc 1 187 6 view .LVU93
 335 0038 80B9     		cbnz	r0, .L23
 194:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 336              		.loc 1 194 3 is_stmt 1 view .LVU94
 194:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 337              		.loc 1 194 31 is_stmt 0 view .LVU95
 338 003a 0F23     		movs	r3, #15
 339 003c 0193     		str	r3, [sp, #4]
 196:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 340              		.loc 1 196 3 is_stmt 1 view .LVU96
 196:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 341              		.loc 1 196 34 is_stmt 0 view .LVU97
 342 003e 0221     		movs	r1, #2
 343 0040 0291     		str	r1, [sp, #8]
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 344              		.loc 1 197 3 is_stmt 1 view .LVU98
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 345              		.loc 1 197 35 is_stmt 0 view .LVU99
 346 0042 0023     		movs	r3, #0
 347 0044 0393     		str	r3, [sp, #12]
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 348              		.loc 1 198 3 is_stmt 1 view .LVU100
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 349              		.loc 1 198 36 is_stmt 0 view .LVU101
 350 0046 4FF48062 		mov	r2, #1024
 351 004a 0492     		str	r2, [sp, #16]
 199:Core/Src/main.c **** 
ARM GAS  /tmp/cc6wK56V.s 			page 15


 352              		.loc 1 199 3 is_stmt 1 view .LVU102
 199:Core/Src/main.c **** 
 353              		.loc 1 199 36 is_stmt 0 view .LVU103
 354 004c 0593     		str	r3, [sp, #20]
 201:Core/Src/main.c ****   {
 355              		.loc 1 201 3 is_stmt 1 view .LVU104
 201:Core/Src/main.c ****   {
 356              		.loc 1 201 7 is_stmt 0 view .LVU105
 357 004e 01A8     		add	r0, sp, #4
 358 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 359              	.LVL6:
 201:Core/Src/main.c ****   {
 360              		.loc 1 201 6 view .LVU106
 361 0054 20B9     		cbnz	r0, .L24
 205:Core/Src/main.c **** 
 362              		.loc 1 205 1 view .LVU107
 363 0056 11B0     		add	sp, sp, #68
 364              	.LCFI6:
 365              		.cfi_remember_state
 366              		.cfi_def_cfa_offset 4
 367              		@ sp needed
 368 0058 5DF804FB 		ldr	pc, [sp], #4
 369              	.L23:
 370              	.LCFI7:
 371              		.cfi_restore_state
 189:Core/Src/main.c ****   }
 372              		.loc 1 189 5 is_stmt 1 view .LVU108
 373 005c FFF7FEFF 		bl	Error_Handler
 374              	.LVL7:
 375              	.L24:
 203:Core/Src/main.c ****   }
 376              		.loc 1 203 5 view .LVU109
 377 0060 FFF7FEFF 		bl	Error_Handler
 378              	.LVL8:
 379              		.cfi_endproc
 380              	.LFE67:
 382              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 383              		.align	2
 384              	.LC0:
 385 0000 30782558 		.ascii	"0x%X\000"
 385      00
 386              		.section	.text.main,"ax",%progbits
 387              		.align	1
 388              		.global	main
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu softvfp
 394              	main:
 395              	.LFB66:
  87:Core/Src/main.c **** 
 396              		.loc 1 87 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400 0000 38B5     		push	{r3, r4, r5, lr}
 401              	.LCFI8:
ARM GAS  /tmp/cc6wK56V.s 			page 16


 402              		.cfi_def_cfa_offset 16
 403              		.cfi_offset 3, -16
 404              		.cfi_offset 4, -12
 405              		.cfi_offset 5, -8
 406              		.cfi_offset 14, -4
  90:Core/Src/main.c **** 
 407              		.loc 1 90 3 view .LVU111
 408              	.LVL9:
  97:Core/Src/main.c **** 
 409              		.loc 1 97 3 view .LVU112
 410 0002 FFF7FEFF 		bl	HAL_Init
 411              	.LVL10:
 100:Core/Src/main.c ****   /* USER CODE END Init */
 412              		.loc 1 100 3 view .LVU113
 413 0006 6420     		movs	r0, #100
 414 0008 FFF7FEFF 		bl	HAL_Delay
 415              	.LVL11:
 104:Core/Src/main.c **** 
 416              		.loc 1 104 3 view .LVU114
 417 000c FFF7FEFF 		bl	SystemClock_Config
 418              	.LVL12:
 111:Core/Src/main.c ****   MX_I2C1_Init();
 419              		.loc 1 111 3 view .LVU115
 420 0010 FFF7FEFF 		bl	MX_GPIO_Init
 421              	.LVL13:
 112:Core/Src/main.c ****   MX_USART1_UART_Init();
 422              		.loc 1 112 3 view .LVU116
 423 0014 FFF7FEFF 		bl	MX_I2C1_Init
 424              	.LVL14:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 425              		.loc 1 113 3 view .LVU117
 426 0018 FFF7FEFF 		bl	MX_USART1_UART_Init
 427              	.LVL15:
 115:Core/Src/main.c ****  
 428              		.loc 1 115 3 view .LVU118
 429 001c 4FF47A70 		mov	r0, #1000
 430 0020 FFF7FEFF 		bl	HAL_Delay
 431              	.LVL16:
 118:Core/Src/main.c ****     for(i=1; i<128; i++)
 432              		.loc 1 118 5 view .LVU119
 433 0024 42F21073 		movw	r3, #10000
 434 0028 1A22     		movs	r2, #26
 435 002a 1849     		ldr	r1, .L33
 436 002c 1848     		ldr	r0, .L33+4
 437 002e FFF7FEFF 		bl	HAL_UART_Transmit
 438              	.LVL17:
 119:Core/Src/main.c ****     {
 439              		.loc 1 119 5 view .LVU120
 119:Core/Src/main.c ****     {
 440              		.loc 1 119 10 is_stmt 0 view .LVU121
 441 0032 0124     		movs	r4, #1
 119:Core/Src/main.c ****     {
 442              		.loc 1 119 5 view .LVU122
 443 0034 0EE0     		b	.L26
 444              	.LVL18:
 445              	.L27:
 126:Core/Src/main.c ****         {
ARM GAS  /tmp/cc6wK56V.s 			page 17


 446              		.loc 1 126 14 is_stmt 1 view .LVU123
 128:Core/Src/main.c ****             HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 447              		.loc 1 128 13 view .LVU124
 448 0036 174D     		ldr	r5, .L33+8
 449 0038 2246     		mov	r2, r4
 450 003a 1749     		ldr	r1, .L33+12
 451 003c 2846     		mov	r0, r5
 452              	.LVL19:
 128:Core/Src/main.c ****             HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 453              		.loc 1 128 13 is_stmt 0 view .LVU125
 454 003e FFF7FEFF 		bl	sprintf
 455              	.LVL20:
 129:Core/Src/main.c ****         }
 456              		.loc 1 129 13 is_stmt 1 view .LVU126
 457 0042 42F21073 		movw	r3, #10000
 458 0046 1922     		movs	r2, #25
 459 0048 2946     		mov	r1, r5
 460 004a 1148     		ldr	r0, .L33+4
 461 004c FFF7FEFF 		bl	HAL_UART_Transmit
 462              	.LVL21:
 463              	.L28:
 119:Core/Src/main.c ****     {
 464              		.loc 1 119 21 discriminator 2 view .LVU127
 119:Core/Src/main.c ****     {
 465              		.loc 1 119 22 is_stmt 0 discriminator 2 view .LVU128
 466 0050 0134     		adds	r4, r4, #1
 467              	.LVL22:
 119:Core/Src/main.c ****     {
 468              		.loc 1 119 22 discriminator 2 view .LVU129
 469 0052 E4B2     		uxtb	r4, r4
 470              	.LVL23:
 471              	.L26:
 119:Core/Src/main.c ****     {
 472              		.loc 1 119 14 is_stmt 1 discriminator 1 view .LVU130
 119:Core/Src/main.c ****     {
 473              		.loc 1 119 5 is_stmt 0 discriminator 1 view .LVU131
 474 0054 14F0800F 		tst	r4, #128
 475 0058 0FD1     		bne	.L32
 121:Core/Src/main.c ****         if (ret != HAL_OK) /* No ACK Received At That Address */
 476              		.loc 1 121 9 is_stmt 1 view .LVU132
 121:Core/Src/main.c ****         if (ret != HAL_OK) /* No ACK Received At That Address */
 477              		.loc 1 121 15 is_stmt 0 view .LVU133
 478 005a 0523     		movs	r3, #5
 479 005c 0322     		movs	r2, #3
 480 005e 6100     		lsls	r1, r4, #1
 481 0060 0E48     		ldr	r0, .L33+16
 482 0062 FFF7FEFF 		bl	HAL_I2C_IsDeviceReady
 483              	.LVL24:
 122:Core/Src/main.c ****         {
 484              		.loc 1 122 9 is_stmt 1 view .LVU134
 122:Core/Src/main.c ****         {
 485              		.loc 1 122 12 is_stmt 0 view .LVU135
 486 0066 0028     		cmp	r0, #0
 487 0068 E5D0     		beq	.L27
 124:Core/Src/main.c ****         }
 488              		.loc 1 124 13 is_stmt 1 view .LVU136
 489 006a 42F21073 		movw	r3, #10000
ARM GAS  /tmp/cc6wK56V.s 			page 18


 490 006e 0422     		movs	r2, #4
 491 0070 0B49     		ldr	r1, .L33+20
 492 0072 0748     		ldr	r0, .L33+4
 493              	.LVL25:
 124:Core/Src/main.c ****         }
 494              		.loc 1 124 13 is_stmt 0 view .LVU137
 495 0074 FFF7FEFF 		bl	HAL_UART_Transmit
 496              	.LVL26:
 497 0078 EAE7     		b	.L28
 498              	.L32:
 132:Core/Src/main.c ****     /*--[ Scanning Done ]--*/
 499              		.loc 1 132 5 is_stmt 1 view .LVU138
 500 007a 42F21073 		movw	r3, #10000
 501 007e 0B22     		movs	r2, #11
 502 0080 0849     		ldr	r1, .L33+24
 503 0082 0348     		ldr	r0, .L33+4
 504 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 505              	.LVL27:
 506              	.L30:
 159:Core/Src/main.c ****   {
 507              		.loc 1 159 3 discriminator 1 view .LVU139
 164:Core/Src/main.c ****   /* USER CODE END 3 */
 508              		.loc 1 164 3 discriminator 1 view .LVU140
 159:Core/Src/main.c ****   {
 509              		.loc 1 159 9 discriminator 1 view .LVU141
 510 0088 FEE7     		b	.L30
 511              	.L34:
 512 008a 00BF     		.align	2
 513              	.L33:
 514 008c 00000000 		.word	.LANCHOR2
 515 0090 00000000 		.word	.LANCHOR1
 516 0094 00000000 		.word	.LANCHOR4
 517 0098 00000000 		.word	.LC0
 518 009c 00000000 		.word	.LANCHOR0
 519 00a0 00000000 		.word	.LANCHOR3
 520 00a4 00000000 		.word	.LANCHOR5
 521              		.cfi_endproc
 522              	.LFE66:
 524              		.global	EndMSG
 525              		.global	StartMSG
 526              		.global	Space
 527              		.global	Buffer
 528              		.global	data_memori
 529              		.global	Data_Read
 530              		.global	Data_Write
 531              		.global	huart1
 532              		.global	hi2c1
 533              		.global	mata_merem
 534              		.global	mata_melek
 535              		.section	.bss.Buffer,"aw",%nobits
 536              		.align	2
 537              		.set	.LANCHOR4,. + 0
 540              	Buffer:
 541 0000 00000000 		.space	25
 541      00000000 
 541      00000000 
 541      00000000 
ARM GAS  /tmp/cc6wK56V.s 			page 19


 541      00000000 
 542              		.section	.bss.Data_Read,"aw",%nobits
 543              		.align	2
 546              	Data_Read:
 547 0000 00000000 		.space	10
 547      00000000 
 547      0000
 548              		.section	.bss.data_memori,"aw",%nobits
 549              		.align	2
 552              	data_memori:
 553 0000 00000000 		.space	25
 553      00000000 
 553      00000000 
 553      00000000 
 553      00000000 
 554              		.section	.bss.hi2c1,"aw",%nobits
 555              		.align	2
 556              		.set	.LANCHOR0,. + 0
 559              	hi2c1:
 560 0000 00000000 		.space	84
 560      00000000 
 560      00000000 
 560      00000000 
 560      00000000 
 561              		.section	.bss.huart1,"aw",%nobits
 562              		.align	2
 563              		.set	.LANCHOR1,. + 0
 566              	huart1:
 567 0000 00000000 		.space	72
 567      00000000 
 567      00000000 
 567      00000000 
 567      00000000 
 568              		.section	.data.Data_Write,"aw"
 569              		.align	2
 572              	Data_Write:
 573 0000 5400     		.ascii	"T\000"
 574 0002 00000000 		.space	8
 574      00000000 
 575              		.section	.data.EndMSG,"aw"
 576              		.align	2
 577              		.set	.LANCHOR5,. + 0
 580              	EndMSG:
 581 0000 446F6E65 		.ascii	"Done! \015\012\015\012\000"
 581      21200D0A 
 581      0D0A00
 582              		.section	.data.Space,"aw"
 583              		.align	2
 584              		.set	.LANCHOR3,. + 0
 587              	Space:
 588 0000 202D2000 		.ascii	" - \000"
 589              		.section	.data.StartMSG,"aw"
 590              		.align	2
 591              		.set	.LANCHOR2,. + 0
 594              	StartMSG:
 595 0000 53746172 		.ascii	"Starting I2C Scanning: \015\012\000"
 595      74696E67 
ARM GAS  /tmp/cc6wK56V.s 			page 20


 595      20493243 
 595      20536361 
 595      6E6E696E 
 596              		.section	.rodata.mata_melek,"a"
 597              		.align	2
 600              	mata_melek:
 601 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 601      00000000 
 601      00000000 
 601      00
 602 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 602      00000000 
 602      00000000 
 602      00
 603 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 603      00000000 
 603      00000000 
 603      00
 604 0027 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 604      00000000 
 604      00000000 
 604      00
 605 0034 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 605      00000000 
 605      00000000 
 605      00
 606 0041 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 606      00000000 
 606      00000000 
 606      00
 607 004e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 607      00000000 
 607      00000000 
 607      00
 608 005b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 608      00000000 
 608      00000000 
 608      00
 609 0068 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 609      00000000 
 609      00000000 
 609      00
 610 0075 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 610      00000000 
 610      00000000 
 610      00
 611 0082 00000001 		.ascii	"\000\000\000\001\370\000\001\360\000\000\000\000\000"
 611      F80001F0 
 611      00000000 
 611      00
 612 008f 00000000 		.ascii	"\000\000\000\000\000\000\017\360\000\017\370\000\000"
 612      00000FF0 
 612      000FF800 
 612      00
 613 009c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\360\000\037\370"
 613      00000000 
 613      003FF000 
ARM GAS  /tmp/cc6wK56V.s 			page 21


 613      1FF8
 614 00aa 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\377\360"
 614      00000000 
 614      000001FF 
 614      F0
 615 00b7 003FFC00 		.ascii	"\000?\374\000\000\000\000\000\000\000\000\000\000\007"
 615      00000000 
 615      00000000 
 615      0007
 616 00c5 FFF0007F 		.ascii	"\377\360\000\177\374\000\000\000\000\000\000\000\000"
 616      FC000000 
 616      00000000 
 616      00
 617 00d2 00003FFF 		.ascii	"\000\000?\377\340\000\377\374\000\000\000\000\000\000"
 617      E000FFFC 
 617      00000000 
 617      0000
 618 00e0 00000003 		.ascii	"\000\000\000\003\377\377\340\000\377\376\002\000\000"
 618      FFFFE000 
 618      FFFE0200 
 618      00
 619 00ed 00000000 		.ascii	"\000\000\000\000\000\000\007\377\377\340\000\377\376"
 619      000007FF 
 619      FFE000FF 
 619      FE
 620 00fa 03000000 		.ascii	"\003\000\000\000\000\000\000\000\000\007\377\377\340"
 620      00000000 
 620      0007FFFF 
 620      E0
 621 0107 00FFFE03 		.ascii	"\000\377\376\003\200\000\000\000\000\000\000\000\003"
 621      80000000 
 621      00000000 
 621      03
 622 0114 FFFFC000 		.ascii	"\377\377\300\000\377\376\003\300\000\000\000\000\000"
 622      FFFE03C0 
 622      00000000 
 622      00
 623 0121 000001FF 		.ascii	"\000\000\001\377\377\300\000\377\376\001\340\000\000"
 623      FFC000FF 
 623      FE01E000 
 623      00
 624 012e 00000000 		.ascii	"\000\000\000\000\000\000\377\377\300\000\377\376\001"
 624      0000FFFF 
 624      C000FFFE 
 624      01
 625 013b E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\177\377\300\000"
 625      00000000 
 625      007FFFC0 
 625      00
 626 0148 FFFE01F0 		.ascii	"\377\376\001\360\000\000\000\000\000\000\000\000\177"
 626      00000000 
 626      00000000 
 626      7F
 627 0155 FFC0007F 		.ascii	"\377\300\000\177\376\001\370\000\000\000\000\000\000"
 627      FE01F800 
 627      00000000 
 627      00
ARM GAS  /tmp/cc6wK56V.s 			page 22


 628 0162 00003FFF 		.ascii	"\000\000?\377\300\000\177\376\000\370\000\000\000\000"
 628      C0007FFE 
 628      00F80000 
 628      0000
 629 0170 00000000 		.ascii	"\000\000\000\000\037\377\300\000?\376\000\374\000\000"
 629      1FFFC000 
 629      3FFE00FC 
 629      0000
 630 017e 00000000 		.ascii	"\000\000\000\000\000\000\007\377\300\000?\374\000\376"
 630      000007FF 
 630      C0003FFC 
 630      00FE
 631 018c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\377\300\000\037"
 631      00000000 
 631      03FFC000 
 631      1F
 632 0199 F800FE00 		.ascii	"\370\000\376\000\000\000\000\000\000\000\000\000\377"
 632      00000000 
 632      00000000 
 632      FF
 633 01a6 C0000FF0 		.ascii	"\300\000\017\360\000\376\000\000\000\000\000\000\000"
 633      00FE0000 
 633      00000000 
 633      00
 634 01b3 00007FC0 		.ascii	"\000\000\177\300\000\000\000\000\377\000\000\000\000"
 634      00000000 
 634      FF000000 
 634      00
 635 01c0 00000000 		.ascii	"\000\000\000\000\000?\300\000\000\000\000\377\000\000"
 635      003FC000 
 635      000000FF 
 635      0000
 636 01ce 00000000 		.ascii	"\000\000\000\000\000\000\000\037\300\000\000\000\000"
 636      0000001F 
 636      C0000000 
 636      00
 637 01db FF000000 		.ascii	"\377\000\000\000\000\000\000\000\000\000\017\300\000"
 637      00000000 
 637      00000FC0 
 637      00
 638 01e8 000000FF 		.ascii	"\000\000\000\377\000\000\000\000\000\000\000\000\000"
 638      00000000 
 638      00000000 
 638      00
 639 01f5 07E00000 		.ascii	"\007\340\000\000\000\000\377\000\000\000\000\000\000"
 639      0000FF00 
 639      00000000 
 639      00
 640 0202 00000003 		.ascii	"\000\000\000\003\340\000\000\000\000\377\000\000\000"
 640      E0000000 
 640      00FF0000 
 640      00
 641 020f 00000000 		.ascii	"\000\000\000\000\000\000\003\340\000\000\000\000\377"
 641      000003E0 
 641      00000000 
 641      FF
 642 021c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\360\000\000"
ARM GAS  /tmp/cc6wK56V.s 			page 23


 642      00000000 
 642      0001F000 
 642      00
 643 0229 0001FF00 		.ascii	"\000\001\377\000\000\000\000\000\000\000\000\000\000"
 643      00000000 
 643      00000000 
 643      00
 644 0236 F0000000 		.ascii	"\360\000\000\000\001\377\000\000\000\000\000\000\000"
 644      01FF0000 
 644      00000000 
 644      00
 645 0243 000000F8 		.ascii	"\000\000\000\370\000\000\000\001\377\000\000\000\000"
 645      00000001 
 645      FF000000 
 645      00
 646 0250 00000000 		.ascii	"\000\000\000\000\000\000|\000\000\000\003\377\000\000"
 646      00007C00 
 646      000003FF 
 646      0000
 647 025e 00000000 		.ascii	"\000\000\000\000\000\000\000\000>\000\000\000\003\377"
 647      00000000 
 647      3E000000 
 647      03FF
 648 026c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\037\000\000"
 648      00000000 
 648      00001F00 
 648      00
 649 0279 0007FF00 		.ascii	"\000\007\377\000\000\000\000\000\000\000\000\000\000"
 649      00000000 
 649      00000000 
 649      00
 650 0286 1FC00000 		.ascii	"\037\300\000\000\017\377\200\000\000\000\000\000\000"
 650      0FFF8000 
 650      00000000 
 650      00
 651 0293 0000000F 		.ascii	"\000\000\000\017\360\000\000\037\377\200\000\000\000"
 651      F000001F 
 651      FF800000 
 651      00
 652 02a0 00000000 		.ascii	"\000\000\000\000\000\000\007\377\200\000\377\377\200"
 652      000007FF 
 652      8000FFFF 
 652      80
 653 02ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\003\377\376\037"
 653      00000000 
 653      0003FFFE 
 653      1F
 654 02ba FFFF8000 		.ascii	"\377\377\200\000\000\000\000\000\000\000\000\000\001"
 654      00000000 
 654      00000000 
 654      01
 655 02c7 FFFFFFFF 		.ascii	"\377\377\377\377\377\200\000\000\000\000\000\000\000"
 655      FF800000 
 655      00000000 
 655      00
 656 02d4 000000FF 		.ascii	"\000\000\000\377\377\377\377\377\200\000\000\000\000"
 656      FFFFFFFF 
ARM GAS  /tmp/cc6wK56V.s 			page 24


 656      80000000 
 656      00
 657 02e1 00000000 		.ascii	"\000\000\000\000\000\000\177\377\377\377\377\200\000"
 657      00007FFF 
 657      FFFFFF80 
 657      00
 658 02ee 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\377\377\377\377"
 658      00000000 
 658      003FFFFF 
 658      FFFF
 659 02fc 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\017\377"
 659      00000000 
 659      0000000F 
 659      FF
 660 0309 FFFFFF80 		.ascii	"\377\377\377\200\000\000\000\000\000\000\000\000\000"
 660      00000000 
 660      00000000 
 660      00
 661 0316 0007FFFF 		.ascii	"\000\007\377\377\377\377\200\000\000\000\000\000\000"
 661      FFFF8000 
 661      00000000 
 661      00
 662 0323 00000000 		.ascii	"\000\000\000\000\001\377\377\377\377\200\000\000\000"
 662      01FFFFFF 
 662      FF800000 
 662      00
 663 0330 00000000 		.ascii	"\000\000\000\000\000\000\000\000\177\377\377\377\000"
 663      00000000 
 663      7FFFFFFF 
 663      00
 664 033d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\037\377"
 664      00000000 
 664      0000001F 
 664      FF
 665 034a FFFF0000 		.ascii	"\377\377\000\000\000\000\000\000\000\000\000\000\000"
 665      00000000 
 665      00000000 
 665      00
 666 0357 0003FFFF 		.ascii	"\000\003\377\377\377\000\000\000\000\000\000\000\000"
 666      FF000000 
 666      00000000 
 666      00
 667 0364 00000000 		.ascii	"\000\000\000\000\000\000\003\377\000\000\000\000\000"
 667      000003FF 
 667      00000000 
 667      00
 668 0371 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000?\000\000\000"
 668      00000000 
 668      00003F00 
 668      0000
 669 037f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\002"
 669      00000000 
 669      00000000 
 669      02
 670 038c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 670      00000000 
 670      00000000 
ARM GAS  /tmp/cc6wK56V.s 			page 25


 670      00
 671 0399 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 671      00000000 
 671      00000000 
 671      00
 672 03a6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 672      00000000 
 672      00000000 
 672      00
 673 03b3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 673      00000000 
 673      00000000 
 673      00
 674 03c0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 674      00000000 
 674      00000000 
 674      00
 675 03cd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 675      00000000 
 675      00000000 
 675      00
 676 03da 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 676      00000000 
 676      00000000 
 676      00
 677 03e7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 677      00000000 
 677      00000000 
 677      00
 678 03f4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000"
 678      00000000 
 678      00000000 
 679              		.section	.rodata.mata_merem,"a"
 680              		.align	2
 683              	mata_merem:
 684 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 684      00000000 
 684      00000000 
 684      00
 685 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 685      00000000 
 685      00000000 
 685      00
 686 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 686      00000000 
 686      00000000 
 686      00
 687 0027 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 687      00000000 
 687      00000000 
 687      00
 688 0034 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 688      00000000 
 688      00000000 
 688      00
 689 0041 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 689      00000000 
ARM GAS  /tmp/cc6wK56V.s 			page 26


 689      00000000 
 689      00
 690 004e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 690      00000000 
 690      00000000 
 690      00
 691 005b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 691      00000000 
 691      00000000 
 691      00
 692 0068 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\020\000"
 692      00000000 
 692      00000010 
 692      00
 693 0075 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 693      00000000 
 693      00000000 
 693      00
 694 0082 00180000 		.ascii	"\000\030\000\000\000\000\000\000\000\000\000\000\000"
 694      00000000 
 694      00000000 
 694      00
 695 008f 00000000 		.ascii	"\000\000\000\000\034\000\000\000\000\002\000\000\000"
 695      1C000000 
 695      00020000 
 695      00
 696 009c 00000000 		.ascii	"\000\000\000\000\000\000\000\036\000\000\000\000\003"
 696      0000001E 
 696      00000000 
 696      03
 697 00a9 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000>\000\000\000"
 697      00000000 
 697      00003E00 
 697      0000
 698 00b7 0007C000 		.ascii	"\000\007\300\000\000\000\000\000\000\000\000\000<\000"
 698      00000000 
 698      00000000 
 698      3C00
 699 00c5 00000007 		.ascii	"\000\000\000\007\360\000\000\000\000\000\000\000\000"
 699      F0000000 
 699      00000000 
 699      00
 700 00d2 003C0000 		.ascii	"\000<\000\000\000\000\001\374\000\000\000\000\000\000"
 700      000001FC 
 700      00000000 
 700      0000
 701 00e0 0000003E 		.ascii	"\000\000\000>\000\000\000\000\000\376\000\000\000\000"
 701      00000000 
 701      00FE0000 
 701      0000
 702 00ee 00000000 		.ascii	"\000\000\000\000\000\177\200\000\000\000\000?\200\000"
 702      007F8000 
 702      0000003F 
 702      8000
 703 00fc 00000000 		.ascii	"\000\000\000\000\000\000\000\177\340\000\000\000\000"
 703      0000007F 
 703      E0000000 
ARM GAS  /tmp/cc6wK56V.s 			page 27


 703      00
 704 0109 0FE00000 		.ascii	"\017\340\000\000\000\000\000\000\000\000{\360\000\000"
 704      00000000 
 704      00007BF0 
 704      0000
 705 0117 000007F0 		.ascii	"\000\000\007\360\000\000\000\000\000\000\000\000x\374"
 705      00000000 
 705      00000000 
 705      78FC
 706 0125 00000000 		.ascii	"\000\000\000\000\001\360\000\000\000\000\000\000\000"
 706      01F00000 
 706      00000000 
 706      00
 707 0132 00787F00 		.ascii	"\000x\177\000\000\000\000\000p\000\000\000\000\000\000"
 707      00000000 
 707      70000000 
 707      000000
 708 0141 0000301F 		.ascii	"\000\0000\037\200\000\000\000\000 \000\000\000\000\000"
 708      80000000 
 708      00200000 
 708      000000
 709 0150 00000010 		.ascii	"\000\000\000\020\007\340\000\000\000\000\000\000\000"
 709      07E00000 
 709      00000000 
 709      00
 710 015d 00000000 		.ascii	"\000\000\000\000\000\000\000\003\370\000\000\000\000"
 710      00000003 
 710      F8000000 
 710      00
 711 016a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\376\000"
 711      00000000 
 711      000000FE 
 711      00
 712 0177 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 712      00000000 
 712      00000000 
 712      00
 713 0184 003F0000 		.ascii	"\000?\000\000\000\000\000\000\000\000\000\000\000\000"
 713      00000000 
 713      00000000 
 713      0000
 714 0192 0000000F 		.ascii	"\000\000\000\017\300\000\000\000\000\000\000\000\000"
 714      C0000000 
 714      00000000 
 714      00
 715 019f 00000000 		.ascii	"\000\000\000\000\000\000\007\360\000\000\000\000\000"
 715      000007F0 
 715      00000000 
 715      00
 716 01ac 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\370\000\000"
 716      00000000 
 716      0001F800 
 716      00
 717 01b9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 717      00000000 
 717      00000000 
 717      00
ARM GAS  /tmp/cc6wK56V.s 			page 28


 718 01c6 7E000000 		.ascii	"~\000\000\000\000\000\000\000\000\000\000\000\000\000"
 718      00000000 
 718      00000000 
 718      0000
 719 01d4 00003F80 		.ascii	"\000\000?\200\000\000\000\000\000\000\000\000\000\000"
 719      00000000 
 719      00000000 
 719      0000
 720 01e2 00000000 		.ascii	"\000\000\000\000\017\340\000\000\000\000\000\000\000"
 720      0FE00000 
 720      00000000 
 720      00
 721 01ef 00000000 		.ascii	"\000\000\000\000\000\000\000\003\360\000\000\000\000"
 721      00000003 
 721      F0000000 
 721      00
 722 01fc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\374\000"
 722      00000000 
 722      000001FC 
 722      00
 723 0209 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 723      00000000 
 723      00000000 
 723      00
 724 0216 007F0000 		.ascii	"\000\177\000\000\000\000\000\000\000\000\000\000\000"
 724      00000000 
 724      00000000 
 724      00
 725 0223 00000000 		.ascii	"\000\000\000\000\037\200\000\000\000\000\000\000\000"
 725      1F800000 
 725      00000000 
 725      00
 726 0230 00000000 		.ascii	"\000\000\000\000\000\000\000\007\340\000\000\000\000"
 726      00000007 
 726      E0000000 
 726      00
 727 023d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\003\370\000"
 727      00000000 
 727      000003F8 
 727      00
 728 024a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 728      00000000 
 728      00000000 
 728      00
 729 0257 00FE0000 		.ascii	"\000\376\000\000\000\000\000\000\000\000\000\000\000"
 729      00000000 
 729      00000000 
 729      00
 730 0264 00000000 		.ascii	"\000\000\000\000?\000\000\000\000\000\000\000\000\000"
 730      3F000000 
 730      00000000 
 730      0000
 731 0272 00000000 		.ascii	"\000\000\000\000\000\000\037\300\000\000\000\000\000"
 731      00001FC0 
 731      00000000 
 731      00
 732 027f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\007\360\000\000"
ARM GAS  /tmp/cc6wK56V.s 			page 29


 732      00000000 
 732      0007F000 
 732      00
 733 028c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\001"
 733      00000000 
 733      00000000 
 733      01
 734 0299 F8000000 		.ascii	"\370\000\000\000\000\000\000\000\000\000\000\000\000"
 734      00000000 
 734      00000000 
 734      00
 735 02a6 0000007E 		.ascii	"\000\000\000~\000\000\000\000\000\000\000\000\000\000"
 735      00000000 
 735      00000000 
 735      0000
 736 02b4 00000000 		.ascii	"\000\000\000\000\000?\200\000\000\000\000\000\000\000"
 736      003F8000 
 736      00000000 
 736      0000
 737 02c2 00000000 		.ascii	"\000\000\000\000\000\000\000\017\340\000\000\000\000"
 737      0000000F 
 737      E0000000 
 737      00
 738 02cf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\003\360\000"
 738      00000000 
 738      000003F0 
 738      00
 739 02dc 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\000\000"
 739      00000000 
 739      00000000 
 739      00
 740 02e9 01FC0180 		.ascii	"\001\374\001\200\000\000\000\000\000\000\000\000\000"
 740      00000000 
 740      00000000 
 740      00
 741 02f6 00000000 		.ascii	"\000\000\000\000\177\001\300\000\000\000\000\000\000"
 741      7F01C000 
 741      00000000 
 741      00
 742 0303 00000000 		.ascii	"\000\000\000\000\000\000\000\037\201\340\000\000\000"
 742      0000001F 
 742      81E00000 
 742      00
 743 0310 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\007\341\340"
 743      00000000 
 743      000007E1 
 743      E0
 744 031d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 744      00000000 
 744      00000000 
 744      00
 745 032a 03F9E000 		.ascii	"\003\371\340\000\000\000\000\000\000\000\000\000\000"
 745      00000000 
 745      00000000 
 745      00
 746 0337 00000000 		.ascii	"\000\000\000\000\377\340\000\000\000\000\000\000\000"
 746      FFE00000 
ARM GAS  /tmp/cc6wK56V.s 			page 30


 746      00000000 
 746      00
 747 0344 00000000 		.ascii	"\000\000\000\000\000\000\000?\300\000\000\000\000\000"
 747      0000003F 
 747      C0000000 
 747      0000
 748 0352 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\037\300\000\000"
 748      00000000 
 748      001FC000 
 748      00
 749 035f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\007"
 749      00000000 
 749      00000000 
 749      07
 750 036c C0000000 		.ascii	"\300\000\000\000\000\000\000\000\000\000\000\000\000"
 750      00000000 
 750      00000000 
 750      00
 751 0379 000007C0 		.ascii	"\000\000\007\300\000\000\000\000\000\000\000\000\000"
 751      00000000 
 751      00000000 
 751      00
 752 0386 00000000 		.ascii	"\000\000\000\000\000\007\300\000\000\000\000\000\000"
 752      0007C000 
 752      00000000 
 752      00
 753 0393 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\200\000\000\000"
 753      00000000 
 753      03800000 
 753      00
 754 03a0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\001\200"
 754      00000000 
 754      00000001 
 754      80
 755 03ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 755      00000000 
 755      00000000 
 755      00
 756 03ba 00018000 		.ascii	"\000\001\200\000\000\000\000\000\000\000\000\000\000"
 756      00000000 
 756      00000000 
 756      00
 757 03c7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 757      00000000 
 757      00000000 
 757      00
 758 03d4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 758      00000000 
 758      00000000 
 758      00
 759 03e1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 759      00000000 
 759      00000000 
 759      00
 760 03ee 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 760      00000000 
 760      00000000 
ARM GAS  /tmp/cc6wK56V.s 			page 31


 760      00
 761 03fb 00000000 		.ascii	"\000\000\000\000\000"
 761      00
 762              		.text
 763              	.Letext0:
 764              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 765              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 766              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 767              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 768              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 769              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 770              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 771              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 772              		.file 11 "Core/Inc/ssd1306.h"
 773              		.file 12 "Core/Inc/bitmap.h"
 774              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 775              		.file 14 "/usr/include/newlib/stdio.h"
 776              		.file 15 "<built-in>"
ARM GAS  /tmp/cc6wK56V.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc6wK56V.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc6wK56V.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc6wK56V.s:89     .text.MX_GPIO_Init:0000000000000040 $d
     /tmp/cc6wK56V.s:94     .text.Error_Handler:0000000000000000 $t
     /tmp/cc6wK56V.s:101    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc6wK56V.s:133    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cc6wK56V.s:139    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cc6wK56V.s:197    .text.MX_I2C1_Init:000000000000002c $d
     /tmp/cc6wK56V.s:204    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc6wK56V.s:210    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc6wK56V.s:265    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/cc6wK56V.s:271    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc6wK56V.s:278    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc6wK56V.s:383    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc6wK56V.s:387    .text.main:0000000000000000 $t
     /tmp/cc6wK56V.s:394    .text.main:0000000000000000 main
     /tmp/cc6wK56V.s:514    .text.main:000000000000008c $d
     /tmp/cc6wK56V.s:580    .data.EndMSG:0000000000000000 EndMSG
     /tmp/cc6wK56V.s:594    .data.StartMSG:0000000000000000 StartMSG
     /tmp/cc6wK56V.s:587    .data.Space:0000000000000000 Space
     /tmp/cc6wK56V.s:540    .bss.Buffer:0000000000000000 Buffer
     /tmp/cc6wK56V.s:552    .bss.data_memori:0000000000000000 data_memori
     /tmp/cc6wK56V.s:546    .bss.Data_Read:0000000000000000 Data_Read
     /tmp/cc6wK56V.s:572    .data.Data_Write:0000000000000000 Data_Write
     /tmp/cc6wK56V.s:566    .bss.huart1:0000000000000000 huart1
     /tmp/cc6wK56V.s:559    .bss.hi2c1:0000000000000000 hi2c1
     /tmp/cc6wK56V.s:683    .rodata.mata_merem:0000000000000000 mata_merem
     /tmp/cc6wK56V.s:600    .rodata.mata_melek:0000000000000000 mata_melek
     /tmp/cc6wK56V.s:536    .bss.Buffer:0000000000000000 $d
     /tmp/cc6wK56V.s:543    .bss.Data_Read:0000000000000000 $d
     /tmp/cc6wK56V.s:549    .bss.data_memori:0000000000000000 $d
     /tmp/cc6wK56V.s:555    .bss.hi2c1:0000000000000000 $d
     /tmp/cc6wK56V.s:562    .bss.huart1:0000000000000000 $d
     /tmp/cc6wK56V.s:569    .data.Data_Write:0000000000000000 $d
     /tmp/cc6wK56V.s:576    .data.EndMSG:0000000000000000 $d
     /tmp/cc6wK56V.s:583    .data.Space:0000000000000000 $d
     /tmp/cc6wK56V.s:590    .data.StartMSG:0000000000000000 $d
     /tmp/cc6wK56V.s:597    .rodata.mata_melek:0000000000000000 $d
     /tmp/cc6wK56V.s:680    .rodata.mata_merem:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
HAL_UART_Transmit
sprintf
HAL_I2C_IsDeviceReady
