ARM GAS  /tmp/ccJnEuxK.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB70:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "string.h"
  25:Core/Src/main.c **** #include "stdio.h"
  26:Core/Src/main.c **** #include "ssd1306_fonts.h"
  27:Core/Src/main.c **** #include "ssd1306_tests.h"
  28:Core/Src/main.c **** #include "ssd1306.h"
  29:Core/Src/main.c **** #include "bitmap.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccJnEuxK.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** UART_HandleTypeDef huart1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** #define EEPROM_ADDR (0xA0 << 1)
  55:Core/Src/main.c **** uint8_t toWrite[] = "T";
  56:Core/Src/main.c **** uint8_t Write[];
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE END PV */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  61:Core/Src/main.c **** void SystemClock_Config(void);
  62:Core/Src/main.c **** static void MX_GPIO_Init(void);
  63:Core/Src/main.c **** static void MX_I2C1_Init(void);
  64:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  65:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END PFP */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  70:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** /* USER CODE END 0 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /**
  75:Core/Src/main.c ****   * @brief  The application entry point.
  76:Core/Src/main.c ****   * @retval int
  77:Core/Src/main.c ****   */
  78:Core/Src/main.c **** int main(void)
  79:Core/Src/main.c **** {
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE END 1 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  88:Core/Src/main.c ****   HAL_Init();
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* USER CODE BEGIN Init */
ARM GAS  /tmp/ccJnEuxK.s 			page 3


  91:Core/Src/main.c ****   HAL_Delay(100); // tambahkan delay untuk auto reset supaya bisa auto run
  92:Core/Src/main.c ****   /* USER CODE END Init */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* Configure the system clock */
  95:Core/Src/main.c ****   SystemClock_Config();
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE END SysInit */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* Initialize all configured peripherals */
 102:Core/Src/main.c ****   MX_GPIO_Init();
 103:Core/Src/main.c ****   MX_I2C1_Init();
 104:Core/Src/main.c ****   MX_USART1_UART_Init();
 105:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 106:Core/Src/main.c ****   //HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t M
 107:Core/Src/main.c ****   HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0, 2, (uint8_t*)toWrite, strlen(toWrite), HAL_MAX_DELAY);
 108:Core/Src/main.c ****   HAL_Delay(1000);
 109:Core/Src/main.c ****   uint8_t data = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, 2, (uint8_t*)Write, strlen(Write), HAL_MA
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   sprintf(Write, "", data);
 112:Core/Src/main.c ****   HAL_UART_Transmit(&huart1,(uint8_t*)Write, strlen(Write), HAL_MAX_DELAY);
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE END 2 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* Infinite loop */
 117:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 118:Core/Src/main.c ****   while (1)
 119:Core/Src/main.c ****   {
 120:Core/Src/main.c ****     /* USER CODE END WHILE */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 123:Core/Src/main.c ****   }
 124:Core/Src/main.c ****   /* USER CODE END 3 */
 125:Core/Src/main.c **** }
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /**
 128:Core/Src/main.c ****   * @brief System Clock Configuration
 129:Core/Src/main.c ****   * @retval None
 130:Core/Src/main.c ****   */
 131:Core/Src/main.c **** void SystemClock_Config(void)
 132:Core/Src/main.c **** {
 133:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 134:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 137:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 140:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 141:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 145:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 146:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 147:Core/Src/main.c ****   {
ARM GAS  /tmp/ccJnEuxK.s 			page 4


 148:Core/Src/main.c ****     Error_Handler();
 149:Core/Src/main.c ****   }
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 152:Core/Src/main.c ****   */
 153:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 154:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 155:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 156:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 157:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 158:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 161:Core/Src/main.c ****   {
 162:Core/Src/main.c ****     Error_Handler();
 163:Core/Src/main.c ****   }
 164:Core/Src/main.c **** }
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** /**
 167:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 168:Core/Src/main.c ****   * @param None
 169:Core/Src/main.c ****   * @retval None
 170:Core/Src/main.c ****   */
 171:Core/Src/main.c **** static void MX_I2C1_Init(void)
 172:Core/Src/main.c **** {
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 181:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 182:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 183:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 184:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 185:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 186:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 187:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 188:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 189:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 190:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 191:Core/Src/main.c ****   {
 192:Core/Src/main.c ****     Error_Handler();
 193:Core/Src/main.c ****   }
 194:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** }
 199:Core/Src/main.c **** 
 200:Core/Src/main.c **** /**
 201:Core/Src/main.c ****   * @brief USART1 Initialization Function
 202:Core/Src/main.c ****   * @param None
 203:Core/Src/main.c ****   * @retval None
 204:Core/Src/main.c ****   */
ARM GAS  /tmp/ccJnEuxK.s 			page 5


 205:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 206:Core/Src/main.c **** {
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 213:Core/Src/main.c **** 
 214:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 215:Core/Src/main.c ****   huart1.Instance = USART1;
 216:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 217:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 218:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 219:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 220:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 221:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 222:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 223:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     Error_Handler();
 226:Core/Src/main.c ****   }
 227:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c **** }
 232:Core/Src/main.c **** 
 233:Core/Src/main.c **** /**
 234:Core/Src/main.c ****   * @brief GPIO Initialization Function
 235:Core/Src/main.c ****   * @param None
 236:Core/Src/main.c ****   * @retval None
 237:Core/Src/main.c ****   */
 238:Core/Src/main.c **** static void MX_GPIO_Init(void)
 239:Core/Src/main.c **** {
  26              		.loc 1 239 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 84B0     		sub	sp, sp, #16
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
 240:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 241:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 244:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  34              		.loc 1 244 3 view .LVU1
  35              	.LBB4:
  36              		.loc 1 244 3 view .LVU2
  37              		.loc 1 244 3 view .LVU3
  38 0002 0F4B     		ldr	r3, .L3
  39 0004 9A69     		ldr	r2, [r3, #24]
  40 0006 42F02002 		orr	r2, r2, #32
  41 000a 9A61     		str	r2, [r3, #24]
  42              		.loc 1 244 3 view .LVU4
ARM GAS  /tmp/ccJnEuxK.s 			page 6


  43 000c 9A69     		ldr	r2, [r3, #24]
  44 000e 02F02002 		and	r2, r2, #32
  45 0012 0192     		str	r2, [sp, #4]
  46              		.loc 1 244 3 view .LVU5
  47 0014 019A     		ldr	r2, [sp, #4]
  48              	.LBE4:
  49              		.loc 1 244 3 view .LVU6
 245:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  50              		.loc 1 245 3 view .LVU7
  51              	.LBB5:
  52              		.loc 1 245 3 view .LVU8
  53              		.loc 1 245 3 view .LVU9
  54 0016 9A69     		ldr	r2, [r3, #24]
  55 0018 42F00402 		orr	r2, r2, #4
  56 001c 9A61     		str	r2, [r3, #24]
  57              		.loc 1 245 3 view .LVU10
  58 001e 9A69     		ldr	r2, [r3, #24]
  59 0020 02F00402 		and	r2, r2, #4
  60 0024 0292     		str	r2, [sp, #8]
  61              		.loc 1 245 3 view .LVU11
  62 0026 029A     		ldr	r2, [sp, #8]
  63              	.LBE5:
  64              		.loc 1 245 3 view .LVU12
 246:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  65              		.loc 1 246 3 view .LVU13
  66              	.LBB6:
  67              		.loc 1 246 3 view .LVU14
  68              		.loc 1 246 3 view .LVU15
  69 0028 9A69     		ldr	r2, [r3, #24]
  70 002a 42F00802 		orr	r2, r2, #8
  71 002e 9A61     		str	r2, [r3, #24]
  72              		.loc 1 246 3 view .LVU16
  73 0030 9B69     		ldr	r3, [r3, #24]
  74 0032 03F00803 		and	r3, r3, #8
  75 0036 0393     		str	r3, [sp, #12]
  76              		.loc 1 246 3 view .LVU17
  77 0038 039B     		ldr	r3, [sp, #12]
  78              	.LBE6:
  79              		.loc 1 246 3 view .LVU18
 247:Core/Src/main.c **** 
 248:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 249:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 250:Core/Src/main.c **** }
  80              		.loc 1 250 1 is_stmt 0 view .LVU19
  81 003a 04B0     		add	sp, sp, #16
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 0
  84              		@ sp needed
  85 003c 7047     		bx	lr
  86              	.L4:
  87 003e 00BF     		.align	2
  88              	.L3:
  89 0040 00100240 		.word	1073876992
  90              		.cfi_endproc
  91              	.LFE70:
  93              		.section	.text.Error_Handler,"ax",%progbits
  94              		.align	1
ARM GAS  /tmp/ccJnEuxK.s 			page 7


  95              		.global	Error_Handler
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	Error_Handler:
 102              	.LFB71:
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** /* USER CODE END 4 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c **** /**
 257:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 258:Core/Src/main.c ****   * @retval None
 259:Core/Src/main.c ****   */
 260:Core/Src/main.c **** void Error_Handler(void)
 261:Core/Src/main.c **** {
 103              		.loc 1 261 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ Volatile: function does not return.
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 262:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 263:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 264:Core/Src/main.c ****   __disable_irq();
 109              		.loc 1 264 3 view .LVU21
 110              	.LBB7:
 111              	.LBI7:
 112              		.file 2 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
ARM GAS  /tmp/ccJnEuxK.s 			page 8


  27:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 113              		.loc 2 69 57 view .LVU22
 114              	.LBB8:
  70:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 115              		.loc 2 71 3 view .LVU23
 116              		.syntax unified
 117              	@ 71 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h" 1
 118 0000 72B6     		cpsid i
 119              	@ 0 "" 2
 120              		.thumb
 121              		.syntax unified
 122              	.L6:
 123              	.LBE8:
 124              	.LBE7:
ARM GAS  /tmp/ccJnEuxK.s 			page 9


 265:Core/Src/main.c ****   while (1)
 125              		.loc 1 265 3 discriminator 1 view .LVU24
 266:Core/Src/main.c ****   {
 267:Core/Src/main.c ****   }
 126              		.loc 1 267 3 discriminator 1 view .LVU25
 265:Core/Src/main.c ****   while (1)
 127              		.loc 1 265 9 discriminator 1 view .LVU26
 128 0002 FEE7     		b	.L6
 129              		.cfi_endproc
 130              	.LFE71:
 132              		.section	.text.MX_I2C1_Init,"ax",%progbits
 133              		.align	1
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	MX_I2C1_Init:
 140              	.LFB68:
 172:Core/Src/main.c **** 
 141              		.loc 1 172 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI2:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 181:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 150              		.loc 1 181 3 view .LVU28
 181:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 151              		.loc 1 181 18 is_stmt 0 view .LVU29
 152 0002 0A48     		ldr	r0, .L11
 153 0004 0A4B     		ldr	r3, .L11+4
 154 0006 0360     		str	r3, [r0]
 182:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 155              		.loc 1 182 3 is_stmt 1 view .LVU30
 182:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 156              		.loc 1 182 25 is_stmt 0 view .LVU31
 157 0008 0A4B     		ldr	r3, .L11+8
 158 000a 4360     		str	r3, [r0, #4]
 183:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 159              		.loc 1 183 3 is_stmt 1 view .LVU32
 183:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 160              		.loc 1 183 24 is_stmt 0 view .LVU33
 161 000c 0023     		movs	r3, #0
 162 000e 8360     		str	r3, [r0, #8]
 184:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 163              		.loc 1 184 3 is_stmt 1 view .LVU34
 184:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 164              		.loc 1 184 26 is_stmt 0 view .LVU35
 165 0010 C360     		str	r3, [r0, #12]
 185:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 166              		.loc 1 185 3 is_stmt 1 view .LVU36
 185:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 167              		.loc 1 185 29 is_stmt 0 view .LVU37
 168 0012 4FF48042 		mov	r2, #16384
ARM GAS  /tmp/ccJnEuxK.s 			page 10


 169 0016 0261     		str	r2, [r0, #16]
 186:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 170              		.loc 1 186 3 is_stmt 1 view .LVU38
 186:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 171              		.loc 1 186 30 is_stmt 0 view .LVU39
 172 0018 4361     		str	r3, [r0, #20]
 187:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 173              		.loc 1 187 3 is_stmt 1 view .LVU40
 187:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 174              		.loc 1 187 26 is_stmt 0 view .LVU41
 175 001a 8361     		str	r3, [r0, #24]
 188:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 176              		.loc 1 188 3 is_stmt 1 view .LVU42
 188:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 177              		.loc 1 188 30 is_stmt 0 view .LVU43
 178 001c C361     		str	r3, [r0, #28]
 189:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 179              		.loc 1 189 3 is_stmt 1 view .LVU44
 189:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 180              		.loc 1 189 28 is_stmt 0 view .LVU45
 181 001e 0362     		str	r3, [r0, #32]
 190:Core/Src/main.c ****   {
 182              		.loc 1 190 3 is_stmt 1 view .LVU46
 190:Core/Src/main.c ****   {
 183              		.loc 1 190 7 is_stmt 0 view .LVU47
 184 0020 FFF7FEFF 		bl	HAL_I2C_Init
 185              	.LVL0:
 190:Core/Src/main.c ****   {
 186              		.loc 1 190 6 view .LVU48
 187 0024 00B9     		cbnz	r0, .L10
 198:Core/Src/main.c **** 
 188              		.loc 1 198 1 view .LVU49
 189 0026 08BD     		pop	{r3, pc}
 190              	.L10:
 192:Core/Src/main.c ****   }
 191              		.loc 1 192 5 is_stmt 1 view .LVU50
 192 0028 FFF7FEFF 		bl	Error_Handler
 193              	.LVL1:
 194              	.L12:
 195              		.align	2
 196              	.L11:
 197 002c 00000000 		.word	.LANCHOR0
 198 0030 00540040 		.word	1073763328
 199 0034 A0860100 		.word	100000
 200              		.cfi_endproc
 201              	.LFE68:
 203              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 204              		.align	1
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu softvfp
 210              	MX_USART1_UART_Init:
 211              	.LFB69:
 206:Core/Src/main.c **** 
 212              		.loc 1 206 1 view -0
 213              		.cfi_startproc
ARM GAS  /tmp/ccJnEuxK.s 			page 11


 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 08B5     		push	{r3, lr}
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 3, -8
 220              		.cfi_offset 14, -4
 215:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 221              		.loc 1 215 3 view .LVU52
 215:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 222              		.loc 1 215 19 is_stmt 0 view .LVU53
 223 0002 0A48     		ldr	r0, .L17
 224 0004 0A4B     		ldr	r3, .L17+4
 225 0006 0360     		str	r3, [r0]
 216:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 226              		.loc 1 216 3 is_stmt 1 view .LVU54
 216:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 227              		.loc 1 216 24 is_stmt 0 view .LVU55
 228 0008 4FF4E133 		mov	r3, #115200
 229 000c 4360     		str	r3, [r0, #4]
 217:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 230              		.loc 1 217 3 is_stmt 1 view .LVU56
 217:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 231              		.loc 1 217 26 is_stmt 0 view .LVU57
 232 000e 0023     		movs	r3, #0
 233 0010 8360     		str	r3, [r0, #8]
 218:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 234              		.loc 1 218 3 is_stmt 1 view .LVU58
 218:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 235              		.loc 1 218 24 is_stmt 0 view .LVU59
 236 0012 C360     		str	r3, [r0, #12]
 219:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 237              		.loc 1 219 3 is_stmt 1 view .LVU60
 219:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 238              		.loc 1 219 22 is_stmt 0 view .LVU61
 239 0014 0361     		str	r3, [r0, #16]
 220:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 240              		.loc 1 220 3 is_stmt 1 view .LVU62
 220:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 241              		.loc 1 220 20 is_stmt 0 view .LVU63
 242 0016 0C22     		movs	r2, #12
 243 0018 4261     		str	r2, [r0, #20]
 221:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 244              		.loc 1 221 3 is_stmt 1 view .LVU64
 221:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 245              		.loc 1 221 25 is_stmt 0 view .LVU65
 246 001a 8361     		str	r3, [r0, #24]
 222:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 247              		.loc 1 222 3 is_stmt 1 view .LVU66
 222:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 248              		.loc 1 222 28 is_stmt 0 view .LVU67
 249 001c C361     		str	r3, [r0, #28]
 223:Core/Src/main.c ****   {
 250              		.loc 1 223 3 is_stmt 1 view .LVU68
 223:Core/Src/main.c ****   {
 251              		.loc 1 223 7 is_stmt 0 view .LVU69
 252 001e FFF7FEFF 		bl	HAL_UART_Init
ARM GAS  /tmp/ccJnEuxK.s 			page 12


 253              	.LVL2:
 223:Core/Src/main.c ****   {
 254              		.loc 1 223 6 view .LVU70
 255 0022 00B9     		cbnz	r0, .L16
 231:Core/Src/main.c **** 
 256              		.loc 1 231 1 view .LVU71
 257 0024 08BD     		pop	{r3, pc}
 258              	.L16:
 225:Core/Src/main.c ****   }
 259              		.loc 1 225 5 is_stmt 1 view .LVU72
 260 0026 FFF7FEFF 		bl	Error_Handler
 261              	.LVL3:
 262              	.L18:
 263 002a 00BF     		.align	2
 264              	.L17:
 265 002c 00000000 		.word	.LANCHOR1
 266 0030 00380140 		.word	1073821696
 267              		.cfi_endproc
 268              	.LFE69:
 270              		.section	.text.SystemClock_Config,"ax",%progbits
 271              		.align	1
 272              		.global	SystemClock_Config
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	SystemClock_Config:
 279              	.LFB67:
 132:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 280              		.loc 1 132 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 64
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 00B5     		push	{lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 14, -4
 288 0002 91B0     		sub	sp, sp, #68
 289              	.LCFI5:
 290              		.cfi_def_cfa_offset 72
 133:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 291              		.loc 1 133 3 view .LVU74
 133:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 292              		.loc 1 133 22 is_stmt 0 view .LVU75
 293 0004 2822     		movs	r2, #40
 294 0006 0021     		movs	r1, #0
 295 0008 06A8     		add	r0, sp, #24
 296 000a FFF7FEFF 		bl	memset
 297              	.LVL4:
 134:Core/Src/main.c **** 
 298              		.loc 1 134 3 is_stmt 1 view .LVU76
 134:Core/Src/main.c **** 
 299              		.loc 1 134 22 is_stmt 0 view .LVU77
 300 000e 0023     		movs	r3, #0
 301 0010 0193     		str	r3, [sp, #4]
 302 0012 0293     		str	r3, [sp, #8]
 303 0014 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccJnEuxK.s 			page 13


 304 0016 0493     		str	r3, [sp, #16]
 305 0018 0593     		str	r3, [sp, #20]
 139:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 306              		.loc 1 139 3 is_stmt 1 view .LVU78
 139:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 307              		.loc 1 139 36 is_stmt 0 view .LVU79
 308 001a 0122     		movs	r2, #1
 309 001c 0692     		str	r2, [sp, #24]
 140:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 310              		.loc 1 140 3 is_stmt 1 view .LVU80
 140:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 311              		.loc 1 140 30 is_stmt 0 view .LVU81
 312 001e 4FF48033 		mov	r3, #65536
 313 0022 0793     		str	r3, [sp, #28]
 141:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 314              		.loc 1 141 3 is_stmt 1 view .LVU82
 142:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 315              		.loc 1 142 3 view .LVU83
 142:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 316              		.loc 1 142 30 is_stmt 0 view .LVU84
 317 0024 0A92     		str	r2, [sp, #40]
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 318              		.loc 1 143 3 is_stmt 1 view .LVU85
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 319              		.loc 1 143 34 is_stmt 0 view .LVU86
 320 0026 0222     		movs	r2, #2
 321 0028 0D92     		str	r2, [sp, #52]
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 322              		.loc 1 144 3 is_stmt 1 view .LVU87
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 323              		.loc 1 144 35 is_stmt 0 view .LVU88
 324 002a 0E93     		str	r3, [sp, #56]
 145:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 325              		.loc 1 145 3 is_stmt 1 view .LVU89
 145:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 326              		.loc 1 145 32 is_stmt 0 view .LVU90
 327 002c 4FF4E013 		mov	r3, #1835008
 328 0030 0F93     		str	r3, [sp, #60]
 146:Core/Src/main.c ****   {
 329              		.loc 1 146 3 is_stmt 1 view .LVU91
 146:Core/Src/main.c ****   {
 330              		.loc 1 146 7 is_stmt 0 view .LVU92
 331 0032 06A8     		add	r0, sp, #24
 332 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 333              	.LVL5:
 146:Core/Src/main.c ****   {
 334              		.loc 1 146 6 view .LVU93
 335 0038 80B9     		cbnz	r0, .L23
 153:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 336              		.loc 1 153 3 is_stmt 1 view .LVU94
 153:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 337              		.loc 1 153 31 is_stmt 0 view .LVU95
 338 003a 0F23     		movs	r3, #15
 339 003c 0193     		str	r3, [sp, #4]
 155:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 340              		.loc 1 155 3 is_stmt 1 view .LVU96
 155:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
ARM GAS  /tmp/ccJnEuxK.s 			page 14


 341              		.loc 1 155 34 is_stmt 0 view .LVU97
 342 003e 0221     		movs	r1, #2
 343 0040 0291     		str	r1, [sp, #8]
 156:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 344              		.loc 1 156 3 is_stmt 1 view .LVU98
 156:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 345              		.loc 1 156 35 is_stmt 0 view .LVU99
 346 0042 0023     		movs	r3, #0
 347 0044 0393     		str	r3, [sp, #12]
 157:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 348              		.loc 1 157 3 is_stmt 1 view .LVU100
 157:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 349              		.loc 1 157 36 is_stmt 0 view .LVU101
 350 0046 4FF48062 		mov	r2, #1024
 351 004a 0492     		str	r2, [sp, #16]
 158:Core/Src/main.c **** 
 352              		.loc 1 158 3 is_stmt 1 view .LVU102
 158:Core/Src/main.c **** 
 353              		.loc 1 158 36 is_stmt 0 view .LVU103
 354 004c 0593     		str	r3, [sp, #20]
 160:Core/Src/main.c ****   {
 355              		.loc 1 160 3 is_stmt 1 view .LVU104
 160:Core/Src/main.c ****   {
 356              		.loc 1 160 7 is_stmt 0 view .LVU105
 357 004e 01A8     		add	r0, sp, #4
 358 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 359              	.LVL6:
 160:Core/Src/main.c ****   {
 360              		.loc 1 160 6 view .LVU106
 361 0054 20B9     		cbnz	r0, .L24
 164:Core/Src/main.c **** 
 362              		.loc 1 164 1 view .LVU107
 363 0056 11B0     		add	sp, sp, #68
 364              	.LCFI6:
 365              		.cfi_remember_state
 366              		.cfi_def_cfa_offset 4
 367              		@ sp needed
 368 0058 5DF804FB 		ldr	pc, [sp], #4
 369              	.L23:
 370              	.LCFI7:
 371              		.cfi_restore_state
 148:Core/Src/main.c ****   }
 372              		.loc 1 148 5 is_stmt 1 view .LVU108
 373 005c FFF7FEFF 		bl	Error_Handler
 374              	.LVL7:
 375              	.L24:
 162:Core/Src/main.c ****   }
 376              		.loc 1 162 5 view .LVU109
 377 0060 FFF7FEFF 		bl	Error_Handler
 378              	.LVL8:
 379              		.cfi_endproc
 380              	.LFE67:
 382              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 383              		.align	2
 384              	.LC0:
 385 0000 00       		.ascii	"\000"
 386              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/ccJnEuxK.s 			page 15


 387              		.align	1
 388              		.global	main
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 392              		.fpu softvfp
 394              	main:
 395              	.LFB66:
  79:Core/Src/main.c **** 
 396              		.loc 1 79 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 400 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 401              	.LCFI8:
 402              		.cfi_def_cfa_offset 20
 403              		.cfi_offset 4, -20
 404              		.cfi_offset 5, -16
 405              		.cfi_offset 6, -12
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 85B0     		sub	sp, sp, #20
 409              	.LCFI9:
 410              		.cfi_def_cfa_offset 40
  88:Core/Src/main.c **** 
 411              		.loc 1 88 3 view .LVU111
 412 0004 FFF7FEFF 		bl	HAL_Init
 413              	.LVL9:
  91:Core/Src/main.c ****   /* USER CODE END Init */
 414              		.loc 1 91 3 view .LVU112
 415 0008 6420     		movs	r0, #100
 416 000a FFF7FEFF 		bl	HAL_Delay
 417              	.LVL10:
  95:Core/Src/main.c **** 
 418              		.loc 1 95 3 view .LVU113
 419 000e FFF7FEFF 		bl	SystemClock_Config
 420              	.LVL11:
 102:Core/Src/main.c ****   MX_I2C1_Init();
 421              		.loc 1 102 3 view .LVU114
 422 0012 FFF7FEFF 		bl	MX_GPIO_Init
 423              	.LVL12:
 103:Core/Src/main.c ****   MX_USART1_UART_Init();
 424              		.loc 1 103 3 view .LVU115
 425 0016 FFF7FEFF 		bl	MX_I2C1_Init
 426              	.LVL13:
 104:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 427              		.loc 1 104 3 view .LVU116
 428 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 429              	.LVL14:
 107:Core/Src/main.c ****   HAL_Delay(1000);
 430              		.loc 1 107 3 view .LVU117
 107:Core/Src/main.c ****   HAL_Delay(1000);
 431              		.loc 1 107 67 is_stmt 0 view .LVU118
 432 001e 174C     		ldr	r4, .L28
 433 0020 2046     		mov	r0, r4
 434 0022 FFF7FEFF 		bl	strlen
 435              	.LVL15:
ARM GAS  /tmp/ccJnEuxK.s 			page 16


 107:Core/Src/main.c ****   HAL_Delay(1000);
 436              		.loc 1 107 3 view .LVU119
 437 0026 164F     		ldr	r7, .L28+4
 438 0028 4FF0FF36 		mov	r6, #-1
 439 002c 0296     		str	r6, [sp, #8]
 440 002e 80B2     		uxth	r0, r0
 441 0030 0190     		str	r0, [sp, #4]
 442 0032 0094     		str	r4, [sp]
 443 0034 0223     		movs	r3, #2
 444 0036 0022     		movs	r2, #0
 445 0038 4FF4A071 		mov	r1, #320
 446 003c 3846     		mov	r0, r7
 447 003e FFF7FEFF 		bl	HAL_I2C_Mem_Write
 448              	.LVL16:
 108:Core/Src/main.c ****   uint8_t data = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, 2, (uint8_t*)Write, strlen(Write), HAL_MA
 449              		.loc 1 108 3 is_stmt 1 view .LVU120
 450 0042 4FF47A70 		mov	r0, #1000
 451 0046 FFF7FEFF 		bl	HAL_Delay
 452              	.LVL17:
 109:Core/Src/main.c **** 
 453              		.loc 1 109 3 view .LVU121
 109:Core/Src/main.c **** 
 454              		.loc 1 109 18 is_stmt 0 view .LVU122
 455 004a 0296     		str	r6, [sp, #8]
 456 004c 0025     		movs	r5, #0
 457 004e 0195     		str	r5, [sp, #4]
 458 0050 0C4C     		ldr	r4, .L28+8
 459 0052 0094     		str	r4, [sp]
 460 0054 0223     		movs	r3, #2
 461 0056 2A46     		mov	r2, r5
 462 0058 4FF4A071 		mov	r1, #320
 463 005c 3846     		mov	r0, r7
 464 005e FFF7FEFF 		bl	HAL_I2C_Mem_Read
 465              	.LVL18:
 466 0062 0246     		mov	r2, r0
 467              	.LVL19:
 111:Core/Src/main.c ****   HAL_UART_Transmit(&huart1,(uint8_t*)Write, strlen(Write), HAL_MAX_DELAY);
 468              		.loc 1 111 3 is_stmt 1 view .LVU123
 469 0064 0849     		ldr	r1, .L28+12
 470 0066 2046     		mov	r0, r4
 471 0068 FFF7FEFF 		bl	sprintf
 472              	.LVL20:
 112:Core/Src/main.c **** 
 473              		.loc 1 112 3 view .LVU124
 474 006c 3346     		mov	r3, r6
 475 006e 2A46     		mov	r2, r5
 476 0070 2146     		mov	r1, r4
 477 0072 0648     		ldr	r0, .L28+16
 478 0074 FFF7FEFF 		bl	HAL_UART_Transmit
 479              	.LVL21:
 480              	.L26:
 118:Core/Src/main.c ****   {
 481              		.loc 1 118 3 discriminator 1 view .LVU125
 123:Core/Src/main.c ****   /* USER CODE END 3 */
 482              		.loc 1 123 3 discriminator 1 view .LVU126
 118:Core/Src/main.c ****   {
 483              		.loc 1 118 9 discriminator 1 view .LVU127
ARM GAS  /tmp/ccJnEuxK.s 			page 17


 484 0078 FEE7     		b	.L26
 485              	.L29:
 486 007a 00BF     		.align	2
 487              	.L28:
 488 007c 00000000 		.word	.LANCHOR2
 489 0080 00000000 		.word	.LANCHOR0
 490 0084 00000000 		.word	.LANCHOR3
 491 0088 00000000 		.word	.LC0
 492 008c 00000000 		.word	.LANCHOR1
 493              		.cfi_endproc
 494              	.LFE66:
 496              		.global	Write
 497              		.global	toWrite
 498              		.global	huart1
 499              		.global	hi2c1
 500              		.global	mata_merem
 501              		.global	mata_melek
 502              		.section	.bss.Write,"aw",%nobits
 503              		.align	2
 504              		.set	.LANCHOR3,. + 0
 507              	Write:
 508 0000 00       		.space	1
 509              		.section	.bss.hi2c1,"aw",%nobits
 510              		.align	2
 511              		.set	.LANCHOR0,. + 0
 514              	hi2c1:
 515 0000 00000000 		.space	84
 515      00000000 
 515      00000000 
 515      00000000 
 515      00000000 
 516              		.section	.bss.huart1,"aw",%nobits
 517              		.align	2
 518              		.set	.LANCHOR1,. + 0
 521              	huart1:
 522 0000 00000000 		.space	72
 522      00000000 
 522      00000000 
 522      00000000 
 522      00000000 
 523              		.section	.data.toWrite,"aw"
 524              		.align	2
 525              		.set	.LANCHOR2,. + 0
 528              	toWrite:
 529 0000 5400     		.ascii	"T\000"
 530              		.section	.rodata.mata_melek,"a"
 531              		.align	2
 534              	mata_melek:
 535 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 535      00000000 
 535      00000000 
 535      00
 536 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 536      00000000 
 536      00000000 
 536      00
 537 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccJnEuxK.s 			page 18


 537      00000000 
 537      00000000 
 537      00
 538 0027 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 538      00000000 
 538      00000000 
 538      00
 539 0034 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 539      00000000 
 539      00000000 
 539      00
 540 0041 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 540      00000000 
 540      00000000 
 540      00
 541 004e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 541      00000000 
 541      00000000 
 541      00
 542 005b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 542      00000000 
 542      00000000 
 542      00
 543 0068 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 543      00000000 
 543      00000000 
 543      00
 544 0075 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 544      00000000 
 544      00000000 
 544      00
 545 0082 00000001 		.ascii	"\000\000\000\001\370\000\001\360\000\000\000\000\000"
 545      F80001F0 
 545      00000000 
 545      00
 546 008f 00000000 		.ascii	"\000\000\000\000\000\000\017\360\000\017\370\000\000"
 546      00000FF0 
 546      000FF800 
 546      00
 547 009c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\360\000\037\370"
 547      00000000 
 547      003FF000 
 547      1FF8
 548 00aa 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\377\360"
 548      00000000 
 548      000001FF 
 548      F0
 549 00b7 003FFC00 		.ascii	"\000?\374\000\000\000\000\000\000\000\000\000\000\007"
 549      00000000 
 549      00000000 
 549      0007
 550 00c5 FFF0007F 		.ascii	"\377\360\000\177\374\000\000\000\000\000\000\000\000"
 550      FC000000 
 550      00000000 
 550      00
 551 00d2 00003FFF 		.ascii	"\000\000?\377\340\000\377\374\000\000\000\000\000\000"
 551      E000FFFC 
ARM GAS  /tmp/ccJnEuxK.s 			page 19


 551      00000000 
 551      0000
 552 00e0 00000003 		.ascii	"\000\000\000\003\377\377\340\000\377\376\002\000\000"
 552      FFFFE000 
 552      FFFE0200 
 552      00
 553 00ed 00000000 		.ascii	"\000\000\000\000\000\000\007\377\377\340\000\377\376"
 553      000007FF 
 553      FFE000FF 
 553      FE
 554 00fa 03000000 		.ascii	"\003\000\000\000\000\000\000\000\000\007\377\377\340"
 554      00000000 
 554      0007FFFF 
 554      E0
 555 0107 00FFFE03 		.ascii	"\000\377\376\003\200\000\000\000\000\000\000\000\003"
 555      80000000 
 555      00000000 
 555      03
 556 0114 FFFFC000 		.ascii	"\377\377\300\000\377\376\003\300\000\000\000\000\000"
 556      FFFE03C0 
 556      00000000 
 556      00
 557 0121 000001FF 		.ascii	"\000\000\001\377\377\300\000\377\376\001\340\000\000"
 557      FFC000FF 
 557      FE01E000 
 557      00
 558 012e 00000000 		.ascii	"\000\000\000\000\000\000\377\377\300\000\377\376\001"
 558      0000FFFF 
 558      C000FFFE 
 558      01
 559 013b E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\177\377\300\000"
 559      00000000 
 559      007FFFC0 
 559      00
 560 0148 FFFE01F0 		.ascii	"\377\376\001\360\000\000\000\000\000\000\000\000\177"
 560      00000000 
 560      00000000 
 560      7F
 561 0155 FFC0007F 		.ascii	"\377\300\000\177\376\001\370\000\000\000\000\000\000"
 561      FE01F800 
 561      00000000 
 561      00
 562 0162 00003FFF 		.ascii	"\000\000?\377\300\000\177\376\000\370\000\000\000\000"
 562      C0007FFE 
 562      00F80000 
 562      0000
 563 0170 00000000 		.ascii	"\000\000\000\000\037\377\300\000?\376\000\374\000\000"
 563      1FFFC000 
 563      3FFE00FC 
 563      0000
 564 017e 00000000 		.ascii	"\000\000\000\000\000\000\007\377\300\000?\374\000\376"
 564      000007FF 
 564      C0003FFC 
 564      00FE
 565 018c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\377\300\000\037"
 565      00000000 
 565      03FFC000 
ARM GAS  /tmp/ccJnEuxK.s 			page 20


 565      1F
 566 0199 F800FE00 		.ascii	"\370\000\376\000\000\000\000\000\000\000\000\000\377"
 566      00000000 
 566      00000000 
 566      FF
 567 01a6 C0000FF0 		.ascii	"\300\000\017\360\000\376\000\000\000\000\000\000\000"
 567      00FE0000 
 567      00000000 
 567      00
 568 01b3 00007FC0 		.ascii	"\000\000\177\300\000\000\000\000\377\000\000\000\000"
 568      00000000 
 568      FF000000 
 568      00
 569 01c0 00000000 		.ascii	"\000\000\000\000\000?\300\000\000\000\000\377\000\000"
 569      003FC000 
 569      000000FF 
 569      0000
 570 01ce 00000000 		.ascii	"\000\000\000\000\000\000\000\037\300\000\000\000\000"
 570      0000001F 
 570      C0000000 
 570      00
 571 01db FF000000 		.ascii	"\377\000\000\000\000\000\000\000\000\000\017\300\000"
 571      00000000 
 571      00000FC0 
 571      00
 572 01e8 000000FF 		.ascii	"\000\000\000\377\000\000\000\000\000\000\000\000\000"
 572      00000000 
 572      00000000 
 572      00
 573 01f5 07E00000 		.ascii	"\007\340\000\000\000\000\377\000\000\000\000\000\000"
 573      0000FF00 
 573      00000000 
 573      00
 574 0202 00000003 		.ascii	"\000\000\000\003\340\000\000\000\000\377\000\000\000"
 574      E0000000 
 574      00FF0000 
 574      00
 575 020f 00000000 		.ascii	"\000\000\000\000\000\000\003\340\000\000\000\000\377"
 575      000003E0 
 575      00000000 
 575      FF
 576 021c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\360\000\000"
 576      00000000 
 576      0001F000 
 576      00
 577 0229 0001FF00 		.ascii	"\000\001\377\000\000\000\000\000\000\000\000\000\000"
 577      00000000 
 577      00000000 
 577      00
 578 0236 F0000000 		.ascii	"\360\000\000\000\001\377\000\000\000\000\000\000\000"
 578      01FF0000 
 578      00000000 
 578      00
 579 0243 000000F8 		.ascii	"\000\000\000\370\000\000\000\001\377\000\000\000\000"
 579      00000001 
 579      FF000000 
 579      00
ARM GAS  /tmp/ccJnEuxK.s 			page 21


 580 0250 00000000 		.ascii	"\000\000\000\000\000\000|\000\000\000\003\377\000\000"
 580      00007C00 
 580      000003FF 
 580      0000
 581 025e 00000000 		.ascii	"\000\000\000\000\000\000\000\000>\000\000\000\003\377"
 581      00000000 
 581      3E000000 
 581      03FF
 582 026c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\037\000\000"
 582      00000000 
 582      00001F00 
 582      00
 583 0279 0007FF00 		.ascii	"\000\007\377\000\000\000\000\000\000\000\000\000\000"
 583      00000000 
 583      00000000 
 583      00
 584 0286 1FC00000 		.ascii	"\037\300\000\000\017\377\200\000\000\000\000\000\000"
 584      0FFF8000 
 584      00000000 
 584      00
 585 0293 0000000F 		.ascii	"\000\000\000\017\360\000\000\037\377\200\000\000\000"
 585      F000001F 
 585      FF800000 
 585      00
 586 02a0 00000000 		.ascii	"\000\000\000\000\000\000\007\377\200\000\377\377\200"
 586      000007FF 
 586      8000FFFF 
 586      80
 587 02ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\003\377\376\037"
 587      00000000 
 587      0003FFFE 
 587      1F
 588 02ba FFFF8000 		.ascii	"\377\377\200\000\000\000\000\000\000\000\000\000\001"
 588      00000000 
 588      00000000 
 588      01
 589 02c7 FFFFFFFF 		.ascii	"\377\377\377\377\377\200\000\000\000\000\000\000\000"
 589      FF800000 
 589      00000000 
 589      00
 590 02d4 000000FF 		.ascii	"\000\000\000\377\377\377\377\377\200\000\000\000\000"
 590      FFFFFFFF 
 590      80000000 
 590      00
 591 02e1 00000000 		.ascii	"\000\000\000\000\000\000\177\377\377\377\377\200\000"
 591      00007FFF 
 591      FFFFFF80 
 591      00
 592 02ee 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\377\377\377\377"
 592      00000000 
 592      003FFFFF 
 592      FFFF
 593 02fc 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\017\377"
 593      00000000 
 593      0000000F 
 593      FF
 594 0309 FFFFFF80 		.ascii	"\377\377\377\200\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccJnEuxK.s 			page 22


 594      00000000 
 594      00000000 
 594      00
 595 0316 0007FFFF 		.ascii	"\000\007\377\377\377\377\200\000\000\000\000\000\000"
 595      FFFF8000 
 595      00000000 
 595      00
 596 0323 00000000 		.ascii	"\000\000\000\000\001\377\377\377\377\200\000\000\000"
 596      01FFFFFF 
 596      FF800000 
 596      00
 597 0330 00000000 		.ascii	"\000\000\000\000\000\000\000\000\177\377\377\377\000"
 597      00000000 
 597      7FFFFFFF 
 597      00
 598 033d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\037\377"
 598      00000000 
 598      0000001F 
 598      FF
 599 034a FFFF0000 		.ascii	"\377\377\000\000\000\000\000\000\000\000\000\000\000"
 599      00000000 
 599      00000000 
 599      00
 600 0357 0003FFFF 		.ascii	"\000\003\377\377\377\000\000\000\000\000\000\000\000"
 600      FF000000 
 600      00000000 
 600      00
 601 0364 00000000 		.ascii	"\000\000\000\000\000\000\003\377\000\000\000\000\000"
 601      000003FF 
 601      00000000 
 601      00
 602 0371 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000?\000\000\000"
 602      00000000 
 602      00003F00 
 602      0000
 603 037f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\002"
 603      00000000 
 603      00000000 
 603      02
 604 038c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 604      00000000 
 604      00000000 
 604      00
 605 0399 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 605      00000000 
 605      00000000 
 605      00
 606 03a6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 606      00000000 
 606      00000000 
 606      00
 607 03b3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 607      00000000 
 607      00000000 
 607      00
 608 03c0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 608      00000000 
ARM GAS  /tmp/ccJnEuxK.s 			page 23


 608      00000000 
 608      00
 609 03cd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 609      00000000 
 609      00000000 
 609      00
 610 03da 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 610      00000000 
 610      00000000 
 610      00
 611 03e7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 611      00000000 
 611      00000000 
 611      00
 612 03f4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000"
 612      00000000 
 612      00000000 
 613              		.section	.rodata.mata_merem,"a"
 614              		.align	2
 617              	mata_merem:
 618 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 618      00000000 
 618      00000000 
 618      00
 619 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 619      00000000 
 619      00000000 
 619      00
 620 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 620      00000000 
 620      00000000 
 620      00
 621 0027 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 621      00000000 
 621      00000000 
 621      00
 622 0034 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 622      00000000 
 622      00000000 
 622      00
 623 0041 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 623      00000000 
 623      00000000 
 623      00
 624 004e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 624      00000000 
 624      00000000 
 624      00
 625 005b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 625      00000000 
 625      00000000 
 625      00
 626 0068 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\020\000"
 626      00000000 
 626      00000010 
 626      00
 627 0075 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccJnEuxK.s 			page 24


 627      00000000 
 627      00000000 
 627      00
 628 0082 00180000 		.ascii	"\000\030\000\000\000\000\000\000\000\000\000\000\000"
 628      00000000 
 628      00000000 
 628      00
 629 008f 00000000 		.ascii	"\000\000\000\000\034\000\000\000\000\002\000\000\000"
 629      1C000000 
 629      00020000 
 629      00
 630 009c 00000000 		.ascii	"\000\000\000\000\000\000\000\036\000\000\000\000\003"
 630      0000001E 
 630      00000000 
 630      03
 631 00a9 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000>\000\000\000"
 631      00000000 
 631      00003E00 
 631      0000
 632 00b7 0007C000 		.ascii	"\000\007\300\000\000\000\000\000\000\000\000\000<\000"
 632      00000000 
 632      00000000 
 632      3C00
 633 00c5 00000007 		.ascii	"\000\000\000\007\360\000\000\000\000\000\000\000\000"
 633      F0000000 
 633      00000000 
 633      00
 634 00d2 003C0000 		.ascii	"\000<\000\000\000\000\001\374\000\000\000\000\000\000"
 634      000001FC 
 634      00000000 
 634      0000
 635 00e0 0000003E 		.ascii	"\000\000\000>\000\000\000\000\000\376\000\000\000\000"
 635      00000000 
 635      00FE0000 
 635      0000
 636 00ee 00000000 		.ascii	"\000\000\000\000\000\177\200\000\000\000\000?\200\000"
 636      007F8000 
 636      0000003F 
 636      8000
 637 00fc 00000000 		.ascii	"\000\000\000\000\000\000\000\177\340\000\000\000\000"
 637      0000007F 
 637      E0000000 
 637      00
 638 0109 0FE00000 		.ascii	"\017\340\000\000\000\000\000\000\000\000{\360\000\000"
 638      00000000 
 638      00007BF0 
 638      0000
 639 0117 000007F0 		.ascii	"\000\000\007\360\000\000\000\000\000\000\000\000x\374"
 639      00000000 
 639      00000000 
 639      78FC
 640 0125 00000000 		.ascii	"\000\000\000\000\001\360\000\000\000\000\000\000\000"
 640      01F00000 
 640      00000000 
 640      00
 641 0132 00787F00 		.ascii	"\000x\177\000\000\000\000\000p\000\000\000\000\000\000"
 641      00000000 
ARM GAS  /tmp/ccJnEuxK.s 			page 25


 641      70000000 
 641      000000
 642 0141 0000301F 		.ascii	"\000\0000\037\200\000\000\000\000 \000\000\000\000\000"
 642      80000000 
 642      00200000 
 642      000000
 643 0150 00000010 		.ascii	"\000\000\000\020\007\340\000\000\000\000\000\000\000"
 643      07E00000 
 643      00000000 
 643      00
 644 015d 00000000 		.ascii	"\000\000\000\000\000\000\000\003\370\000\000\000\000"
 644      00000003 
 644      F8000000 
 644      00
 645 016a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\376\000"
 645      00000000 
 645      000000FE 
 645      00
 646 0177 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 646      00000000 
 646      00000000 
 646      00
 647 0184 003F0000 		.ascii	"\000?\000\000\000\000\000\000\000\000\000\000\000\000"
 647      00000000 
 647      00000000 
 647      0000
 648 0192 0000000F 		.ascii	"\000\000\000\017\300\000\000\000\000\000\000\000\000"
 648      C0000000 
 648      00000000 
 648      00
 649 019f 00000000 		.ascii	"\000\000\000\000\000\000\007\360\000\000\000\000\000"
 649      000007F0 
 649      00000000 
 649      00
 650 01ac 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\370\000\000"
 650      00000000 
 650      0001F800 
 650      00
 651 01b9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 651      00000000 
 651      00000000 
 651      00
 652 01c6 7E000000 		.ascii	"~\000\000\000\000\000\000\000\000\000\000\000\000\000"
 652      00000000 
 652      00000000 
 652      0000
 653 01d4 00003F80 		.ascii	"\000\000?\200\000\000\000\000\000\000\000\000\000\000"
 653      00000000 
 653      00000000 
 653      0000
 654 01e2 00000000 		.ascii	"\000\000\000\000\017\340\000\000\000\000\000\000\000"
 654      0FE00000 
 654      00000000 
 654      00
 655 01ef 00000000 		.ascii	"\000\000\000\000\000\000\000\003\360\000\000\000\000"
 655      00000003 
 655      F0000000 
ARM GAS  /tmp/ccJnEuxK.s 			page 26


 655      00
 656 01fc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\374\000"
 656      00000000 
 656      000001FC 
 656      00
 657 0209 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 657      00000000 
 657      00000000 
 657      00
 658 0216 007F0000 		.ascii	"\000\177\000\000\000\000\000\000\000\000\000\000\000"
 658      00000000 
 658      00000000 
 658      00
 659 0223 00000000 		.ascii	"\000\000\000\000\037\200\000\000\000\000\000\000\000"
 659      1F800000 
 659      00000000 
 659      00
 660 0230 00000000 		.ascii	"\000\000\000\000\000\000\000\007\340\000\000\000\000"
 660      00000007 
 660      E0000000 
 660      00
 661 023d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\003\370\000"
 661      00000000 
 661      000003F8 
 661      00
 662 024a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 662      00000000 
 662      00000000 
 662      00
 663 0257 00FE0000 		.ascii	"\000\376\000\000\000\000\000\000\000\000\000\000\000"
 663      00000000 
 663      00000000 
 663      00
 664 0264 00000000 		.ascii	"\000\000\000\000?\000\000\000\000\000\000\000\000\000"
 664      3F000000 
 664      00000000 
 664      0000
 665 0272 00000000 		.ascii	"\000\000\000\000\000\000\037\300\000\000\000\000\000"
 665      00001FC0 
 665      00000000 
 665      00
 666 027f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\007\360\000\000"
 666      00000000 
 666      0007F000 
 666      00
 667 028c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\001"
 667      00000000 
 667      00000000 
 667      01
 668 0299 F8000000 		.ascii	"\370\000\000\000\000\000\000\000\000\000\000\000\000"
 668      00000000 
 668      00000000 
 668      00
 669 02a6 0000007E 		.ascii	"\000\000\000~\000\000\000\000\000\000\000\000\000\000"
 669      00000000 
 669      00000000 
 669      0000
ARM GAS  /tmp/ccJnEuxK.s 			page 27


 670 02b4 00000000 		.ascii	"\000\000\000\000\000?\200\000\000\000\000\000\000\000"
 670      003F8000 
 670      00000000 
 670      0000
 671 02c2 00000000 		.ascii	"\000\000\000\000\000\000\000\017\340\000\000\000\000"
 671      0000000F 
 671      E0000000 
 671      00
 672 02cf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\003\360\000"
 672      00000000 
 672      000003F0 
 672      00
 673 02dc 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\000\000"
 673      00000000 
 673      00000000 
 673      00
 674 02e9 01FC0180 		.ascii	"\001\374\001\200\000\000\000\000\000\000\000\000\000"
 674      00000000 
 674      00000000 
 674      00
 675 02f6 00000000 		.ascii	"\000\000\000\000\177\001\300\000\000\000\000\000\000"
 675      7F01C000 
 675      00000000 
 675      00
 676 0303 00000000 		.ascii	"\000\000\000\000\000\000\000\037\201\340\000\000\000"
 676      0000001F 
 676      81E00000 
 676      00
 677 0310 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\007\341\340"
 677      00000000 
 677      000007E1 
 677      E0
 678 031d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 678      00000000 
 678      00000000 
 678      00
 679 032a 03F9E000 		.ascii	"\003\371\340\000\000\000\000\000\000\000\000\000\000"
 679      00000000 
 679      00000000 
 679      00
 680 0337 00000000 		.ascii	"\000\000\000\000\377\340\000\000\000\000\000\000\000"
 680      FFE00000 
 680      00000000 
 680      00
 681 0344 00000000 		.ascii	"\000\000\000\000\000\000\000?\300\000\000\000\000\000"
 681      0000003F 
 681      C0000000 
 681      0000
 682 0352 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\037\300\000\000"
 682      00000000 
 682      001FC000 
 682      00
 683 035f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\007"
 683      00000000 
 683      00000000 
 683      07
 684 036c C0000000 		.ascii	"\300\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccJnEuxK.s 			page 28


 684      00000000 
 684      00000000 
 684      00
 685 0379 000007C0 		.ascii	"\000\000\007\300\000\000\000\000\000\000\000\000\000"
 685      00000000 
 685      00000000 
 685      00
 686 0386 00000000 		.ascii	"\000\000\000\000\000\007\300\000\000\000\000\000\000"
 686      0007C000 
 686      00000000 
 686      00
 687 0393 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\200\000\000\000"
 687      00000000 
 687      03800000 
 687      00
 688 03a0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\001\200"
 688      00000000 
 688      00000001 
 688      80
 689 03ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 689      00000000 
 689      00000000 
 689      00
 690 03ba 00018000 		.ascii	"\000\001\200\000\000\000\000\000\000\000\000\000\000"
 690      00000000 
 690      00000000 
 690      00
 691 03c7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 691      00000000 
 691      00000000 
 691      00
 692 03d4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 692      00000000 
 692      00000000 
 692      00
 693 03e1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 693      00000000 
 693      00000000 
 693      00
 694 03ee 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 694      00000000 
 694      00000000 
 694      00
 695 03fb 00000000 		.ascii	"\000\000\000\000\000"
 695      00
 696              		.text
 697              	.Letext0:
 698              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 699              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 700              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 701              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 702              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 703              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 704              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 705              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 706              		.file 11 "Core/Inc/ssd1306.h"
 707              		.file 12 "Core/Inc/bitmap.h"
ARM GAS  /tmp/ccJnEuxK.s 			page 29


 708              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 709              		.file 14 "/usr/include/newlib/string.h"
 710              		.file 15 "/usr/include/newlib/stdio.h"
 711              		.file 16 "<built-in>"
ARM GAS  /tmp/ccJnEuxK.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccJnEuxK.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccJnEuxK.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccJnEuxK.s:89     .text.MX_GPIO_Init:0000000000000040 $d
     /tmp/ccJnEuxK.s:94     .text.Error_Handler:0000000000000000 $t
     /tmp/ccJnEuxK.s:101    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccJnEuxK.s:133    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccJnEuxK.s:139    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccJnEuxK.s:197    .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccJnEuxK.s:204    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccJnEuxK.s:210    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccJnEuxK.s:265    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccJnEuxK.s:271    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccJnEuxK.s:278    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccJnEuxK.s:383    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccJnEuxK.s:387    .text.main:0000000000000000 $t
     /tmp/ccJnEuxK.s:394    .text.main:0000000000000000 main
     /tmp/ccJnEuxK.s:488    .text.main:000000000000007c $d
     /tmp/ccJnEuxK.s:507    .bss.Write:0000000000000000 Write
     /tmp/ccJnEuxK.s:528    .data.toWrite:0000000000000000 toWrite
     /tmp/ccJnEuxK.s:521    .bss.huart1:0000000000000000 huart1
     /tmp/ccJnEuxK.s:514    .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccJnEuxK.s:617    .rodata.mata_merem:0000000000000000 mata_merem
     /tmp/ccJnEuxK.s:534    .rodata.mata_melek:0000000000000000 mata_melek
     /tmp/ccJnEuxK.s:503    .bss.Write:0000000000000000 $d
     /tmp/ccJnEuxK.s:510    .bss.hi2c1:0000000000000000 $d
     /tmp/ccJnEuxK.s:517    .bss.huart1:0000000000000000 $d
     /tmp/ccJnEuxK.s:524    .data.toWrite:0000000000000000 $d
     /tmp/ccJnEuxK.s:531    .rodata.mata_melek:0000000000000000 $d
     /tmp/ccJnEuxK.s:614    .rodata.mata_merem:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
strlen
HAL_I2C_Mem_Write
HAL_I2C_Mem_Read
sprintf
HAL_UART_Transmit
