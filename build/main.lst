ARM GAS  /tmp/ccA1fUEE.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB70:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "string.h"
  25:Core/Src/main.c **** #include "stdio.h"
  26:Core/Src/main.c **** #include "ssd1306_fonts.h"
  27:Core/Src/main.c **** #include "ssd1306_tests.h"
  28:Core/Src/main.c **** #include "ssd1306.h"
  29:Core/Src/main.c **** #include "bitmap.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** #include "stm32f1xx_hal_i2c.h"
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  /tmp/ccA1fUEE.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** UART_HandleTypeDef huart1;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** #define EEPROM_ADDR (0xA0 << 1)
  57:Core/Src/main.c **** uint8_t Data_Write[10] = "T";
  58:Core/Src/main.c **** uint8_t Data_Read[10];
  59:Core/Src/main.c **** char data_memori[25];
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** uint8_t Buffer[25] = {0};
  62:Core/Src/main.c **** uint8_t Space[] = " - ";
  63:Core/Src/main.c **** uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
  64:Core/Src/main.c **** uint8_t EndMSG[] = "Done! \r\n\r\n";
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE END PV */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  69:Core/Src/main.c **** void SystemClock_Config(void);
  70:Core/Src/main.c **** static void MX_GPIO_Init(void);
  71:Core/Src/main.c **** static void MX_I2C1_Init(void);
  72:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* USER CODE END PFP */
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  78:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* USER CODE END 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /**
  83:Core/Src/main.c ****   * @brief  The application entry point.
  84:Core/Src/main.c ****   * @retval int
  85:Core/Src/main.c ****   */
  86:Core/Src/main.c **** int main(void)
  87:Core/Src/main.c **** {
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  90:Core/Src/main.c ****   uint8_t i = 0, ret;
ARM GAS  /tmp/ccA1fUEE.s 			page 3


  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END 1 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Core/Src/main.c ****   HAL_Init();
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 100:Core/Src/main.c ****   HAL_Delay(100); // tambahkan delay untuk auto reset supaya bisa auto run
 101:Core/Src/main.c ****   /* USER CODE END Init */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Configure the system clock */
 104:Core/Src/main.c ****   SystemClock_Config();
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END SysInit */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Initialize all configured peripherals */
 111:Core/Src/main.c ****   MX_GPIO_Init();
 112:Core/Src/main.c ****   MX_I2C1_Init();
 113:Core/Src/main.c ****   MX_USART1_UART_Init();
 114:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 115:Core/Src/main.c ****   HAL_Delay(1000);
 116:Core/Src/main.c ****   /*
 117:Core/Src/main.c ****     //-[ I2C Bus Scanning ]-
 118:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 119:Core/Src/main.c ****     for(i=1; i<128; i++)
 120:Core/Src/main.c ****     {
 121:Core/Src/main.c ****         ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 122:Core/Src/main.c ****         if (ret != HAL_OK) ///No ACK Received At That Address
 123:Core/Src/main.c ****         {
 124:Core/Src/main.c ****             HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 125:Core/Src/main.c ****         }
 126:Core/Src/main.c ****         else if(ret == HAL_OK)
 127:Core/Src/main.c ****         {
 128:Core/Src/main.c ****             sprintf(Buffer, "0x%X", i);
 129:Core/Src/main.c ****             HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 130:Core/Src/main.c ****         }
 131:Core/Src/main.c ****     }
 132:Core/Src/main.c ****     HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 133:Core/Src/main.c ****     //--[ Scanning Done ]--
 134:Core/Src/main.c ****   */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   
 137:Core/Src/main.c ****   //HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t M
 138:Core/Src/main.c ****   HAL_I2C_Mem_Write(&hi2c1, (0xA0 << 1), 0, 2, Data_Write, sizeof(Data_Write), HAL_MAX_DELAY);
 139:Core/Src/main.c ****   HAL_Delay(1000);
 140:Core/Src/main.c ****   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (0xA0 << 1), 0, 2, Data_Read, sizeof(Data_Rea
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   if (status == HAL_OK){
 143:Core/Src/main.c ****     sprintf(data_memori, "data: %hhn ", Data_Read);
 144:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 145:Core/Src/main.c ****     HAL_Delay(5);
 146:Core/Src/main.c ****   }
 147:Core/Src/main.c ****   else {
ARM GAS  /tmp/ccA1fUEE.s 			page 4


 148:Core/Src/main.c ****     sprintf(data_memori, "memori error! \r\n");
 149:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 150:Core/Src/main.c ****     HAL_Delay(5);
 151:Core/Src/main.c ****   }
 152:Core/Src/main.c ****   
 153:Core/Src/main.c ****  
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* USER CODE END 2 */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* Infinite loop */
 158:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 159:Core/Src/main.c ****   while (1)
 160:Core/Src/main.c ****   {
 161:Core/Src/main.c ****     /* USER CODE END WHILE */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 164:Core/Src/main.c ****   }
 165:Core/Src/main.c ****   /* USER CODE END 3 */
 166:Core/Src/main.c **** }
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** /**
 169:Core/Src/main.c ****   * @brief System Clock Configuration
 170:Core/Src/main.c ****   * @retval None
 171:Core/Src/main.c ****   */
 172:Core/Src/main.c **** void SystemClock_Config(void)
 173:Core/Src/main.c **** {
 174:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 175:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 178:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 179:Core/Src/main.c ****   */
 180:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 181:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 182:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 183:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 186:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 187:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****     Error_Handler();
 190:Core/Src/main.c ****   }
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 193:Core/Src/main.c ****   */
 194:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 195:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 196:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 197:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 199:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 202:Core/Src/main.c ****   {
 203:Core/Src/main.c ****     Error_Handler();
 204:Core/Src/main.c ****   }
ARM GAS  /tmp/ccA1fUEE.s 			page 5


 205:Core/Src/main.c **** }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c **** /**
 208:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 209:Core/Src/main.c ****   * @param None
 210:Core/Src/main.c ****   * @retval None
 211:Core/Src/main.c ****   */
 212:Core/Src/main.c **** static void MX_I2C1_Init(void)
 213:Core/Src/main.c **** {
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 222:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 223:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 224:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 225:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 226:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 227:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 228:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 229:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 230:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 231:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c **** }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** /**
 242:Core/Src/main.c ****   * @brief USART1 Initialization Function
 243:Core/Src/main.c ****   * @param None
 244:Core/Src/main.c ****   * @retval None
 245:Core/Src/main.c ****   */
 246:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 247:Core/Src/main.c **** {
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 256:Core/Src/main.c ****   huart1.Instance = USART1;
 257:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 258:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 259:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 260:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 261:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
ARM GAS  /tmp/ccA1fUEE.s 			page 6


 262:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 263:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 264:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 265:Core/Src/main.c ****   {
 266:Core/Src/main.c ****     Error_Handler();
 267:Core/Src/main.c ****   }
 268:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** }
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** /**
 275:Core/Src/main.c ****   * @brief GPIO Initialization Function
 276:Core/Src/main.c ****   * @param None
 277:Core/Src/main.c ****   * @retval None
 278:Core/Src/main.c ****   */
 279:Core/Src/main.c **** static void MX_GPIO_Init(void)
 280:Core/Src/main.c **** {
  26              		.loc 1 280 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 16
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 84B0     		sub	sp, sp, #16
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 16
 281:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 282:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 285:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  34              		.loc 1 285 3 view .LVU1
  35              	.LBB4:
  36              		.loc 1 285 3 view .LVU2
  37              		.loc 1 285 3 view .LVU3
  38 0002 0F4B     		ldr	r3, .L3
  39 0004 9A69     		ldr	r2, [r3, #24]
  40 0006 42F02002 		orr	r2, r2, #32
  41 000a 9A61     		str	r2, [r3, #24]
  42              		.loc 1 285 3 view .LVU4
  43 000c 9A69     		ldr	r2, [r3, #24]
  44 000e 02F02002 		and	r2, r2, #32
  45 0012 0192     		str	r2, [sp, #4]
  46              		.loc 1 285 3 view .LVU5
  47 0014 019A     		ldr	r2, [sp, #4]
  48              	.LBE4:
  49              		.loc 1 285 3 view .LVU6
 286:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  50              		.loc 1 286 3 view .LVU7
  51              	.LBB5:
  52              		.loc 1 286 3 view .LVU8
  53              		.loc 1 286 3 view .LVU9
  54 0016 9A69     		ldr	r2, [r3, #24]
  55 0018 42F00402 		orr	r2, r2, #4
  56 001c 9A61     		str	r2, [r3, #24]
  57              		.loc 1 286 3 view .LVU10
ARM GAS  /tmp/ccA1fUEE.s 			page 7


  58 001e 9A69     		ldr	r2, [r3, #24]
  59 0020 02F00402 		and	r2, r2, #4
  60 0024 0292     		str	r2, [sp, #8]
  61              		.loc 1 286 3 view .LVU11
  62 0026 029A     		ldr	r2, [sp, #8]
  63              	.LBE5:
  64              		.loc 1 286 3 view .LVU12
 287:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  65              		.loc 1 287 3 view .LVU13
  66              	.LBB6:
  67              		.loc 1 287 3 view .LVU14
  68              		.loc 1 287 3 view .LVU15
  69 0028 9A69     		ldr	r2, [r3, #24]
  70 002a 42F00802 		orr	r2, r2, #8
  71 002e 9A61     		str	r2, [r3, #24]
  72              		.loc 1 287 3 view .LVU16
  73 0030 9B69     		ldr	r3, [r3, #24]
  74 0032 03F00803 		and	r3, r3, #8
  75 0036 0393     		str	r3, [sp, #12]
  76              		.loc 1 287 3 view .LVU17
  77 0038 039B     		ldr	r3, [sp, #12]
  78              	.LBE6:
  79              		.loc 1 287 3 view .LVU18
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 290:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 291:Core/Src/main.c **** }
  80              		.loc 1 291 1 is_stmt 0 view .LVU19
  81 003a 04B0     		add	sp, sp, #16
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 0
  84              		@ sp needed
  85 003c 7047     		bx	lr
  86              	.L4:
  87 003e 00BF     		.align	2
  88              	.L3:
  89 0040 00100240 		.word	1073876992
  90              		.cfi_endproc
  91              	.LFE70:
  93              		.section	.text.Error_Handler,"ax",%progbits
  94              		.align	1
  95              		.global	Error_Handler
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu softvfp
 101              	Error_Handler:
 102              	.LFB71:
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** /* USER CODE END 4 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c **** /**
 298:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 299:Core/Src/main.c ****   * @retval None
 300:Core/Src/main.c ****   */
ARM GAS  /tmp/ccA1fUEE.s 			page 8


 301:Core/Src/main.c **** void Error_Handler(void)
 302:Core/Src/main.c **** {
 103              		.loc 1 302 1 is_stmt 1 view -0
 104              		.cfi_startproc
 105              		@ Volatile: function does not return.
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 303:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 304:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 305:Core/Src/main.c ****   __disable_irq();
 109              		.loc 1 305 3 view .LVU21
 110              	.LBB7:
 111              	.LBI7:
 112              		.file 2 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  /tmp/ccA1fUEE.s 			page 9


  43:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 113              		.loc 2 69 57 view .LVU22
 114              	.LBB8:
  70:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 115              		.loc 2 71 3 view .LVU23
 116              		.syntax unified
 117              	@ 71 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/cmsis_gcc.h" 1
 118 0000 72B6     		cpsid i
 119              	@ 0 "" 2
 120              		.thumb
 121              		.syntax unified
 122              	.L6:
 123              	.LBE8:
 124              	.LBE7:
 306:Core/Src/main.c ****   while (1)
 125              		.loc 1 306 3 discriminator 1 view .LVU24
 307:Core/Src/main.c ****   {
 308:Core/Src/main.c ****   }
 126              		.loc 1 308 3 discriminator 1 view .LVU25
 306:Core/Src/main.c ****   while (1)
 127              		.loc 1 306 9 discriminator 1 view .LVU26
 128 0002 FEE7     		b	.L6
 129              		.cfi_endproc
 130              	.LFE71:
 132              		.section	.text.MX_I2C1_Init,"ax",%progbits
 133              		.align	1
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
ARM GAS  /tmp/ccA1fUEE.s 			page 10


 139              	MX_I2C1_Init:
 140              	.LFB68:
 213:Core/Src/main.c **** 
 141              		.loc 1 213 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI2:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 222:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 150              		.loc 1 222 3 view .LVU28
 222:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 400000;
 151              		.loc 1 222 18 is_stmt 0 view .LVU29
 152 0002 0A48     		ldr	r0, .L11
 153 0004 0A4B     		ldr	r3, .L11+4
 154 0006 0360     		str	r3, [r0]
 223:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 155              		.loc 1 223 3 is_stmt 1 view .LVU30
 223:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 156              		.loc 1 223 25 is_stmt 0 view .LVU31
 157 0008 0A4B     		ldr	r3, .L11+8
 158 000a 4360     		str	r3, [r0, #4]
 224:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 159              		.loc 1 224 3 is_stmt 1 view .LVU32
 224:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 160              		.loc 1 224 24 is_stmt 0 view .LVU33
 161 000c 0023     		movs	r3, #0
 162 000e 8360     		str	r3, [r0, #8]
 225:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 163              		.loc 1 225 3 is_stmt 1 view .LVU34
 225:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 164              		.loc 1 225 26 is_stmt 0 view .LVU35
 165 0010 C360     		str	r3, [r0, #12]
 226:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 166              		.loc 1 226 3 is_stmt 1 view .LVU36
 226:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 167              		.loc 1 226 29 is_stmt 0 view .LVU37
 168 0012 4FF48042 		mov	r2, #16384
 169 0016 0261     		str	r2, [r0, #16]
 227:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 170              		.loc 1 227 3 is_stmt 1 view .LVU38
 227:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 171              		.loc 1 227 30 is_stmt 0 view .LVU39
 172 0018 4361     		str	r3, [r0, #20]
 228:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 173              		.loc 1 228 3 is_stmt 1 view .LVU40
 228:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 174              		.loc 1 228 26 is_stmt 0 view .LVU41
 175 001a 8361     		str	r3, [r0, #24]
 229:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 176              		.loc 1 229 3 is_stmt 1 view .LVU42
 229:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 177              		.loc 1 229 30 is_stmt 0 view .LVU43
 178 001c C361     		str	r3, [r0, #28]
ARM GAS  /tmp/ccA1fUEE.s 			page 11


 230:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 179              		.loc 1 230 3 is_stmt 1 view .LVU44
 230:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 180              		.loc 1 230 28 is_stmt 0 view .LVU45
 181 001e 0362     		str	r3, [r0, #32]
 231:Core/Src/main.c ****   {
 182              		.loc 1 231 3 is_stmt 1 view .LVU46
 231:Core/Src/main.c ****   {
 183              		.loc 1 231 7 is_stmt 0 view .LVU47
 184 0020 FFF7FEFF 		bl	HAL_I2C_Init
 185              	.LVL0:
 231:Core/Src/main.c ****   {
 186              		.loc 1 231 6 view .LVU48
 187 0024 00B9     		cbnz	r0, .L10
 239:Core/Src/main.c **** 
 188              		.loc 1 239 1 view .LVU49
 189 0026 08BD     		pop	{r3, pc}
 190              	.L10:
 233:Core/Src/main.c ****   }
 191              		.loc 1 233 5 is_stmt 1 view .LVU50
 192 0028 FFF7FEFF 		bl	Error_Handler
 193              	.LVL1:
 194              	.L12:
 195              		.align	2
 196              	.L11:
 197 002c 00000000 		.word	.LANCHOR0
 198 0030 00540040 		.word	1073763328
 199 0034 801A0600 		.word	400000
 200              		.cfi_endproc
 201              	.LFE68:
 203              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 204              		.align	1
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu softvfp
 210              	MX_USART1_UART_Init:
 211              	.LFB69:
 247:Core/Src/main.c **** 
 212              		.loc 1 247 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 08B5     		push	{r3, lr}
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 3, -8
 220              		.cfi_offset 14, -4
 256:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 221              		.loc 1 256 3 view .LVU52
 256:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 222              		.loc 1 256 19 is_stmt 0 view .LVU53
 223 0002 0A48     		ldr	r0, .L17
 224 0004 0A4B     		ldr	r3, .L17+4
 225 0006 0360     		str	r3, [r0]
 257:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 226              		.loc 1 257 3 is_stmt 1 view .LVU54
ARM GAS  /tmp/ccA1fUEE.s 			page 12


 257:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 227              		.loc 1 257 24 is_stmt 0 view .LVU55
 228 0008 4FF4E133 		mov	r3, #115200
 229 000c 4360     		str	r3, [r0, #4]
 258:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 230              		.loc 1 258 3 is_stmt 1 view .LVU56
 258:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 231              		.loc 1 258 26 is_stmt 0 view .LVU57
 232 000e 0023     		movs	r3, #0
 233 0010 8360     		str	r3, [r0, #8]
 259:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 234              		.loc 1 259 3 is_stmt 1 view .LVU58
 259:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 235              		.loc 1 259 24 is_stmt 0 view .LVU59
 236 0012 C360     		str	r3, [r0, #12]
 260:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 237              		.loc 1 260 3 is_stmt 1 view .LVU60
 260:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 238              		.loc 1 260 22 is_stmt 0 view .LVU61
 239 0014 0361     		str	r3, [r0, #16]
 261:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 240              		.loc 1 261 3 is_stmt 1 view .LVU62
 261:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 241              		.loc 1 261 20 is_stmt 0 view .LVU63
 242 0016 0C22     		movs	r2, #12
 243 0018 4261     		str	r2, [r0, #20]
 262:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 244              		.loc 1 262 3 is_stmt 1 view .LVU64
 262:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 245              		.loc 1 262 25 is_stmt 0 view .LVU65
 246 001a 8361     		str	r3, [r0, #24]
 263:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 247              		.loc 1 263 3 is_stmt 1 view .LVU66
 263:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 248              		.loc 1 263 28 is_stmt 0 view .LVU67
 249 001c C361     		str	r3, [r0, #28]
 264:Core/Src/main.c ****   {
 250              		.loc 1 264 3 is_stmt 1 view .LVU68
 264:Core/Src/main.c ****   {
 251              		.loc 1 264 7 is_stmt 0 view .LVU69
 252 001e FFF7FEFF 		bl	HAL_UART_Init
 253              	.LVL2:
 264:Core/Src/main.c ****   {
 254              		.loc 1 264 6 view .LVU70
 255 0022 00B9     		cbnz	r0, .L16
 272:Core/Src/main.c **** 
 256              		.loc 1 272 1 view .LVU71
 257 0024 08BD     		pop	{r3, pc}
 258              	.L16:
 266:Core/Src/main.c ****   }
 259              		.loc 1 266 5 is_stmt 1 view .LVU72
 260 0026 FFF7FEFF 		bl	Error_Handler
 261              	.LVL3:
 262              	.L18:
 263 002a 00BF     		.align	2
 264              	.L17:
 265 002c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccA1fUEE.s 			page 13


 266 0030 00380140 		.word	1073821696
 267              		.cfi_endproc
 268              	.LFE69:
 270              		.section	.text.SystemClock_Config,"ax",%progbits
 271              		.align	1
 272              		.global	SystemClock_Config
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	SystemClock_Config:
 279              	.LFB67:
 173:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 280              		.loc 1 173 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 64
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 00B5     		push	{lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 14, -4
 288 0002 91B0     		sub	sp, sp, #68
 289              	.LCFI5:
 290              		.cfi_def_cfa_offset 72
 174:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 291              		.loc 1 174 3 view .LVU74
 174:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 292              		.loc 1 174 22 is_stmt 0 view .LVU75
 293 0004 2822     		movs	r2, #40
 294 0006 0021     		movs	r1, #0
 295 0008 06A8     		add	r0, sp, #24
 296 000a FFF7FEFF 		bl	memset
 297              	.LVL4:
 175:Core/Src/main.c **** 
 298              		.loc 1 175 3 is_stmt 1 view .LVU76
 175:Core/Src/main.c **** 
 299              		.loc 1 175 22 is_stmt 0 view .LVU77
 300 000e 0023     		movs	r3, #0
 301 0010 0193     		str	r3, [sp, #4]
 302 0012 0293     		str	r3, [sp, #8]
 303 0014 0393     		str	r3, [sp, #12]
 304 0016 0493     		str	r3, [sp, #16]
 305 0018 0593     		str	r3, [sp, #20]
 180:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 306              		.loc 1 180 3 is_stmt 1 view .LVU78
 180:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 307              		.loc 1 180 36 is_stmt 0 view .LVU79
 308 001a 0122     		movs	r2, #1
 309 001c 0692     		str	r2, [sp, #24]
 181:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 310              		.loc 1 181 3 is_stmt 1 view .LVU80
 181:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 311              		.loc 1 181 30 is_stmt 0 view .LVU81
 312 001e 4FF48033 		mov	r3, #65536
 313 0022 0793     		str	r3, [sp, #28]
 182:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 314              		.loc 1 182 3 is_stmt 1 view .LVU82
ARM GAS  /tmp/ccA1fUEE.s 			page 14


 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 315              		.loc 1 183 3 view .LVU83
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 316              		.loc 1 183 30 is_stmt 0 view .LVU84
 317 0024 0A92     		str	r2, [sp, #40]
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 318              		.loc 1 184 3 is_stmt 1 view .LVU85
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 319              		.loc 1 184 34 is_stmt 0 view .LVU86
 320 0026 0222     		movs	r2, #2
 321 0028 0D92     		str	r2, [sp, #52]
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 322              		.loc 1 185 3 is_stmt 1 view .LVU87
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 323              		.loc 1 185 35 is_stmt 0 view .LVU88
 324 002a 0E93     		str	r3, [sp, #56]
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 325              		.loc 1 186 3 is_stmt 1 view .LVU89
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 326              		.loc 1 186 32 is_stmt 0 view .LVU90
 327 002c 4FF4E013 		mov	r3, #1835008
 328 0030 0F93     		str	r3, [sp, #60]
 187:Core/Src/main.c ****   {
 329              		.loc 1 187 3 is_stmt 1 view .LVU91
 187:Core/Src/main.c ****   {
 330              		.loc 1 187 7 is_stmt 0 view .LVU92
 331 0032 06A8     		add	r0, sp, #24
 332 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 333              	.LVL5:
 187:Core/Src/main.c ****   {
 334              		.loc 1 187 6 view .LVU93
 335 0038 80B9     		cbnz	r0, .L23
 194:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 336              		.loc 1 194 3 is_stmt 1 view .LVU94
 194:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 337              		.loc 1 194 31 is_stmt 0 view .LVU95
 338 003a 0F23     		movs	r3, #15
 339 003c 0193     		str	r3, [sp, #4]
 196:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 340              		.loc 1 196 3 is_stmt 1 view .LVU96
 196:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 341              		.loc 1 196 34 is_stmt 0 view .LVU97
 342 003e 0221     		movs	r1, #2
 343 0040 0291     		str	r1, [sp, #8]
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 344              		.loc 1 197 3 is_stmt 1 view .LVU98
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 345              		.loc 1 197 35 is_stmt 0 view .LVU99
 346 0042 0023     		movs	r3, #0
 347 0044 0393     		str	r3, [sp, #12]
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 348              		.loc 1 198 3 is_stmt 1 view .LVU100
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 349              		.loc 1 198 36 is_stmt 0 view .LVU101
 350 0046 4FF48062 		mov	r2, #1024
 351 004a 0492     		str	r2, [sp, #16]
 199:Core/Src/main.c **** 
ARM GAS  /tmp/ccA1fUEE.s 			page 15


 352              		.loc 1 199 3 is_stmt 1 view .LVU102
 199:Core/Src/main.c **** 
 353              		.loc 1 199 36 is_stmt 0 view .LVU103
 354 004c 0593     		str	r3, [sp, #20]
 201:Core/Src/main.c ****   {
 355              		.loc 1 201 3 is_stmt 1 view .LVU104
 201:Core/Src/main.c ****   {
 356              		.loc 1 201 7 is_stmt 0 view .LVU105
 357 004e 01A8     		add	r0, sp, #4
 358 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 359              	.LVL6:
 201:Core/Src/main.c ****   {
 360              		.loc 1 201 6 view .LVU106
 361 0054 20B9     		cbnz	r0, .L24
 205:Core/Src/main.c **** 
 362              		.loc 1 205 1 view .LVU107
 363 0056 11B0     		add	sp, sp, #68
 364              	.LCFI6:
 365              		.cfi_remember_state
 366              		.cfi_def_cfa_offset 4
 367              		@ sp needed
 368 0058 5DF804FB 		ldr	pc, [sp], #4
 369              	.L23:
 370              	.LCFI7:
 371              		.cfi_restore_state
 189:Core/Src/main.c ****   }
 372              		.loc 1 189 5 is_stmt 1 view .LVU108
 373 005c FFF7FEFF 		bl	Error_Handler
 374              	.LVL7:
 375              	.L24:
 203:Core/Src/main.c ****   }
 376              		.loc 1 203 5 view .LVU109
 377 0060 FFF7FEFF 		bl	Error_Handler
 378              	.LVL8:
 379              		.cfi_endproc
 380              	.LFE67:
 382              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 383              		.align	2
 384              	.LC0:
 385 0000 64617461 		.ascii	"data: %hhn \000"
 385      3A202568 
 385      686E2000 
 386              		.align	2
 387              	.LC1:
 388 000c 6D656D6F 		.ascii	"memori error! \015\012\000"
 388      72692065 
 388      72726F72 
 388      21200D0A 
 388      00
 389              		.section	.text.main,"ax",%progbits
 390              		.align	1
 391              		.global	main
 392              		.syntax unified
 393              		.thumb
 394              		.thumb_func
 395              		.fpu softvfp
 397              	main:
ARM GAS  /tmp/ccA1fUEE.s 			page 16


 398              	.LFB66:
  87:Core/Src/main.c **** 
 399              		.loc 1 87 1 view -0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403 0000 70B5     		push	{r4, r5, r6, lr}
 404              	.LCFI8:
 405              		.cfi_def_cfa_offset 16
 406              		.cfi_offset 4, -16
 407              		.cfi_offset 5, -12
 408              		.cfi_offset 6, -8
 409              		.cfi_offset 14, -4
 410 0002 84B0     		sub	sp, sp, #16
 411              	.LCFI9:
 412              		.cfi_def_cfa_offset 32
  90:Core/Src/main.c **** 
 413              		.loc 1 90 3 view .LVU111
 414              	.LVL9:
  97:Core/Src/main.c **** 
 415              		.loc 1 97 3 view .LVU112
 416 0004 FFF7FEFF 		bl	HAL_Init
 417              	.LVL10:
 100:Core/Src/main.c ****   /* USER CODE END Init */
 418              		.loc 1 100 3 view .LVU113
 419 0008 6420     		movs	r0, #100
 420 000a FFF7FEFF 		bl	HAL_Delay
 421              	.LVL11:
 104:Core/Src/main.c **** 
 422              		.loc 1 104 3 view .LVU114
 423 000e FFF7FEFF 		bl	SystemClock_Config
 424              	.LVL12:
 111:Core/Src/main.c ****   MX_I2C1_Init();
 425              		.loc 1 111 3 view .LVU115
 426 0012 FFF7FEFF 		bl	MX_GPIO_Init
 427              	.LVL13:
 112:Core/Src/main.c ****   MX_USART1_UART_Init();
 428              		.loc 1 112 3 view .LVU116
 429 0016 FFF7FEFF 		bl	MX_I2C1_Init
 430              	.LVL14:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 431              		.loc 1 113 3 view .LVU117
 432 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 433              	.LVL15:
 115:Core/Src/main.c ****   /*
 434              		.loc 1 115 3 view .LVU118
 435 001e 4FF47A70 		mov	r0, #1000
 436 0022 FFF7FEFF 		bl	HAL_Delay
 437              	.LVL16:
 138:Core/Src/main.c ****   HAL_Delay(1000);
 438              		.loc 1 138 3 view .LVU119
 439 0026 244C     		ldr	r4, .L29
 440 0028 4FF0FF36 		mov	r6, #-1
 441 002c 0296     		str	r6, [sp, #8]
 442 002e 0A25     		movs	r5, #10
 443 0030 0195     		str	r5, [sp, #4]
 444 0032 224B     		ldr	r3, .L29+4
ARM GAS  /tmp/ccA1fUEE.s 			page 17


 445 0034 0093     		str	r3, [sp]
 446 0036 0223     		movs	r3, #2
 447 0038 0022     		movs	r2, #0
 448 003a 4FF4A071 		mov	r1, #320
 449 003e 2046     		mov	r0, r4
 450 0040 FFF7FEFF 		bl	HAL_I2C_Mem_Write
 451              	.LVL17:
 139:Core/Src/main.c ****   HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, (0xA0 << 1), 0, 2, Data_Read, sizeof(Data_Rea
 452              		.loc 1 139 3 view .LVU120
 453 0044 4FF47A70 		mov	r0, #1000
 454 0048 FFF7FEFF 		bl	HAL_Delay
 455              	.LVL18:
 140:Core/Src/main.c **** 
 456              		.loc 1 140 3 view .LVU121
 140:Core/Src/main.c **** 
 457              		.loc 1 140 30 is_stmt 0 view .LVU122
 458 004c 0296     		str	r6, [sp, #8]
 459 004e 0195     		str	r5, [sp, #4]
 460 0050 1B4B     		ldr	r3, .L29+8
 461 0052 0093     		str	r3, [sp]
 462 0054 0223     		movs	r3, #2
 463 0056 0022     		movs	r2, #0
 464 0058 4FF4A071 		mov	r1, #320
 465 005c 2046     		mov	r0, r4
 466 005e FFF7FEFF 		bl	HAL_I2C_Mem_Read
 467              	.LVL19:
 142:Core/Src/main.c ****     sprintf(data_memori, "data: %hhn ", Data_Read);
 468              		.loc 1 142 3 is_stmt 1 view .LVU123
 142:Core/Src/main.c ****     sprintf(data_memori, "data: %hhn ", Data_Read);
 469              		.loc 1 142 6 is_stmt 0 view .LVU124
 470 0062 90B9     		cbnz	r0, .L26
 143:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 471              		.loc 1 143 5 is_stmt 1 view .LVU125
 472 0064 174C     		ldr	r4, .L29+12
 473 0066 164A     		ldr	r2, .L29+8
 474 0068 1749     		ldr	r1, .L29+16
 475 006a 2046     		mov	r0, r4
 476              	.LVL20:
 143:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 477              		.loc 1 143 5 is_stmt 0 view .LVU126
 478 006c FFF7FEFF 		bl	sprintf
 479              	.LVL21:
 144:Core/Src/main.c ****     HAL_Delay(5);
 480              		.loc 1 144 5 is_stmt 1 view .LVU127
 144:Core/Src/main.c ****     HAL_Delay(5);
 481              		.loc 1 144 54 is_stmt 0 view .LVU128
 482 0070 2046     		mov	r0, r4
 483 0072 FFF7FEFF 		bl	strlen
 484              	.LVL22:
 144:Core/Src/main.c ****     HAL_Delay(5);
 485              		.loc 1 144 5 view .LVU129
 486 0076 3346     		mov	r3, r6
 487 0078 82B2     		uxth	r2, r0
 488 007a 2146     		mov	r1, r4
 489 007c 1348     		ldr	r0, .L29+20
 490 007e FFF7FEFF 		bl	HAL_UART_Transmit
 491              	.LVL23:
ARM GAS  /tmp/ccA1fUEE.s 			page 18


 145:Core/Src/main.c ****   }
 492              		.loc 1 145 5 is_stmt 1 view .LVU130
 493 0082 0520     		movs	r0, #5
 494 0084 FFF7FEFF 		bl	HAL_Delay
 495              	.LVL24:
 496              	.L27:
 159:Core/Src/main.c ****   {
 497              		.loc 1 159 3 discriminator 1 view .LVU131
 164:Core/Src/main.c ****   /* USER CODE END 3 */
 498              		.loc 1 164 3 discriminator 1 view .LVU132
 159:Core/Src/main.c ****   {
 499              		.loc 1 159 9 discriminator 1 view .LVU133
 500 0088 FEE7     		b	.L27
 501              	.LVL25:
 502              	.L26:
 148:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 503              		.loc 1 148 5 view .LVU134
 504 008a 0E4C     		ldr	r4, .L29+12
 505 008c A446     		mov	ip, r4
 506 008e 104D     		ldr	r5, .L29+24
 507 0090 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 508              	.LVL26:
 148:Core/Src/main.c ****     HAL_UART_Transmit(&huart1,(uint8_t*)data_memori, strlen(data_memori), HAL_MAX_DELAY);
 509              		.loc 1 148 5 is_stmt 0 view .LVU135
 510 0092 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 511 0096 2B68     		ldr	r3, [r5]
 512 0098 8CF80030 		strb	r3, [ip]
 149:Core/Src/main.c ****     HAL_Delay(5);
 513              		.loc 1 149 5 is_stmt 1 view .LVU136
 149:Core/Src/main.c ****     HAL_Delay(5);
 514              		.loc 1 149 54 is_stmt 0 view .LVU137
 515 009c 2046     		mov	r0, r4
 516 009e FFF7FEFF 		bl	strlen
 517              	.LVL27:
 149:Core/Src/main.c ****     HAL_Delay(5);
 518              		.loc 1 149 5 view .LVU138
 519 00a2 4FF0FF33 		mov	r3, #-1
 520 00a6 82B2     		uxth	r2, r0
 521 00a8 2146     		mov	r1, r4
 522 00aa 0848     		ldr	r0, .L29+20
 523 00ac FFF7FEFF 		bl	HAL_UART_Transmit
 524              	.LVL28:
 150:Core/Src/main.c ****   }
 525              		.loc 1 150 5 is_stmt 1 view .LVU139
 526 00b0 0520     		movs	r0, #5
 527 00b2 FFF7FEFF 		bl	HAL_Delay
 528              	.LVL29:
 529 00b6 E7E7     		b	.L27
 530              	.L30:
 531              		.align	2
 532              	.L29:
 533 00b8 00000000 		.word	.LANCHOR0
 534 00bc 00000000 		.word	.LANCHOR2
 535 00c0 00000000 		.word	.LANCHOR3
 536 00c4 00000000 		.word	.LANCHOR4
 537 00c8 00000000 		.word	.LC0
 538 00cc 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccA1fUEE.s 			page 19


 539 00d0 0C000000 		.word	.LC1
 540              		.cfi_endproc
 541              	.LFE66:
 543              		.global	EndMSG
 544              		.global	StartMSG
 545              		.global	Space
 546              		.global	Buffer
 547              		.global	data_memori
 548              		.global	Data_Read
 549              		.global	Data_Write
 550              		.global	huart1
 551              		.global	hi2c1
 552              		.global	mata_merem
 553              		.global	mata_melek
 554              		.section	.bss.Buffer,"aw",%nobits
 555              		.align	2
 558              	Buffer:
 559 0000 00000000 		.space	25
 559      00000000 
 559      00000000 
 559      00000000 
 559      00000000 
 560              		.section	.bss.Data_Read,"aw",%nobits
 561              		.align	2
 562              		.set	.LANCHOR3,. + 0
 565              	Data_Read:
 566 0000 00000000 		.space	10
 566      00000000 
 566      0000
 567              		.section	.bss.data_memori,"aw",%nobits
 568              		.align	2
 569              		.set	.LANCHOR4,. + 0
 572              	data_memori:
 573 0000 00000000 		.space	25
 573      00000000 
 573      00000000 
 573      00000000 
 573      00000000 
 574              		.section	.bss.hi2c1,"aw",%nobits
 575              		.align	2
 576              		.set	.LANCHOR0,. + 0
 579              	hi2c1:
 580 0000 00000000 		.space	84
 580      00000000 
 580      00000000 
 580      00000000 
 580      00000000 
 581              		.section	.bss.huart1,"aw",%nobits
 582              		.align	2
 583              		.set	.LANCHOR1,. + 0
 586              	huart1:
 587 0000 00000000 		.space	72
 587      00000000 
 587      00000000 
 587      00000000 
 587      00000000 
 588              		.section	.data.Data_Write,"aw"
ARM GAS  /tmp/ccA1fUEE.s 			page 20


 589              		.align	2
 590              		.set	.LANCHOR2,. + 0
 593              	Data_Write:
 594 0000 5400     		.ascii	"T\000"
 595 0002 00000000 		.space	8
 595      00000000 
 596              		.section	.data.EndMSG,"aw"
 597              		.align	2
 600              	EndMSG:
 601 0000 446F6E65 		.ascii	"Done! \015\012\015\012\000"
 601      21200D0A 
 601      0D0A00
 602              		.section	.data.Space,"aw"
 603              		.align	2
 606              	Space:
 607 0000 202D2000 		.ascii	" - \000"
 608              		.section	.data.StartMSG,"aw"
 609              		.align	2
 612              	StartMSG:
 613 0000 53746172 		.ascii	"Starting I2C Scanning: \015\012\000"
 613      74696E67 
 613      20493243 
 613      20536361 
 613      6E6E696E 
 614              		.section	.rodata.mata_melek,"a"
 615              		.align	2
 618              	mata_melek:
 619 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 619      00000000 
 619      00000000 
 619      00
 620 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 620      00000000 
 620      00000000 
 620      00
 621 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 621      00000000 
 621      00000000 
 621      00
 622 0027 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 622      00000000 
 622      00000000 
 622      00
 623 0034 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 623      00000000 
 623      00000000 
 623      00
 624 0041 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 624      00000000 
 624      00000000 
 624      00
 625 004e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 625      00000000 
 625      00000000 
 625      00
 626 005b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 626      00000000 
ARM GAS  /tmp/ccA1fUEE.s 			page 21


 626      00000000 
 626      00
 627 0068 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 627      00000000 
 627      00000000 
 627      00
 628 0075 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 628      00000000 
 628      00000000 
 628      00
 629 0082 00000001 		.ascii	"\000\000\000\001\370\000\001\360\000\000\000\000\000"
 629      F80001F0 
 629      00000000 
 629      00
 630 008f 00000000 		.ascii	"\000\000\000\000\000\000\017\360\000\017\370\000\000"
 630      00000FF0 
 630      000FF800 
 630      00
 631 009c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\360\000\037\370"
 631      00000000 
 631      003FF000 
 631      1FF8
 632 00aa 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\377\360"
 632      00000000 
 632      000001FF 
 632      F0
 633 00b7 003FFC00 		.ascii	"\000?\374\000\000\000\000\000\000\000\000\000\000\007"
 633      00000000 
 633      00000000 
 633      0007
 634 00c5 FFF0007F 		.ascii	"\377\360\000\177\374\000\000\000\000\000\000\000\000"
 634      FC000000 
 634      00000000 
 634      00
 635 00d2 00003FFF 		.ascii	"\000\000?\377\340\000\377\374\000\000\000\000\000\000"
 635      E000FFFC 
 635      00000000 
 635      0000
 636 00e0 00000003 		.ascii	"\000\000\000\003\377\377\340\000\377\376\002\000\000"
 636      FFFFE000 
 636      FFFE0200 
 636      00
 637 00ed 00000000 		.ascii	"\000\000\000\000\000\000\007\377\377\340\000\377\376"
 637      000007FF 
 637      FFE000FF 
 637      FE
 638 00fa 03000000 		.ascii	"\003\000\000\000\000\000\000\000\000\007\377\377\340"
 638      00000000 
 638      0007FFFF 
 638      E0
 639 0107 00FFFE03 		.ascii	"\000\377\376\003\200\000\000\000\000\000\000\000\003"
 639      80000000 
 639      00000000 
 639      03
 640 0114 FFFFC000 		.ascii	"\377\377\300\000\377\376\003\300\000\000\000\000\000"
 640      FFFE03C0 
 640      00000000 
ARM GAS  /tmp/ccA1fUEE.s 			page 22


 640      00
 641 0121 000001FF 		.ascii	"\000\000\001\377\377\300\000\377\376\001\340\000\000"
 641      FFC000FF 
 641      FE01E000 
 641      00
 642 012e 00000000 		.ascii	"\000\000\000\000\000\000\377\377\300\000\377\376\001"
 642      0000FFFF 
 642      C000FFFE 
 642      01
 643 013b E0000000 		.ascii	"\340\000\000\000\000\000\000\000\000\177\377\300\000"
 643      00000000 
 643      007FFFC0 
 643      00
 644 0148 FFFE01F0 		.ascii	"\377\376\001\360\000\000\000\000\000\000\000\000\177"
 644      00000000 
 644      00000000 
 644      7F
 645 0155 FFC0007F 		.ascii	"\377\300\000\177\376\001\370\000\000\000\000\000\000"
 645      FE01F800 
 645      00000000 
 645      00
 646 0162 00003FFF 		.ascii	"\000\000?\377\300\000\177\376\000\370\000\000\000\000"
 646      C0007FFE 
 646      00F80000 
 646      0000
 647 0170 00000000 		.ascii	"\000\000\000\000\037\377\300\000?\376\000\374\000\000"
 647      1FFFC000 
 647      3FFE00FC 
 647      0000
 648 017e 00000000 		.ascii	"\000\000\000\000\000\000\007\377\300\000?\374\000\376"
 648      000007FF 
 648      C0003FFC 
 648      00FE
 649 018c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\377\300\000\037"
 649      00000000 
 649      03FFC000 
 649      1F
 650 0199 F800FE00 		.ascii	"\370\000\376\000\000\000\000\000\000\000\000\000\377"
 650      00000000 
 650      00000000 
 650      FF
 651 01a6 C0000FF0 		.ascii	"\300\000\017\360\000\376\000\000\000\000\000\000\000"
 651      00FE0000 
 651      00000000 
 651      00
 652 01b3 00007FC0 		.ascii	"\000\000\177\300\000\000\000\000\377\000\000\000\000"
 652      00000000 
 652      FF000000 
 652      00
 653 01c0 00000000 		.ascii	"\000\000\000\000\000?\300\000\000\000\000\377\000\000"
 653      003FC000 
 653      000000FF 
 653      0000
 654 01ce 00000000 		.ascii	"\000\000\000\000\000\000\000\037\300\000\000\000\000"
 654      0000001F 
 654      C0000000 
 654      00
ARM GAS  /tmp/ccA1fUEE.s 			page 23


 655 01db FF000000 		.ascii	"\377\000\000\000\000\000\000\000\000\000\017\300\000"
 655      00000000 
 655      00000FC0 
 655      00
 656 01e8 000000FF 		.ascii	"\000\000\000\377\000\000\000\000\000\000\000\000\000"
 656      00000000 
 656      00000000 
 656      00
 657 01f5 07E00000 		.ascii	"\007\340\000\000\000\000\377\000\000\000\000\000\000"
 657      0000FF00 
 657      00000000 
 657      00
 658 0202 00000003 		.ascii	"\000\000\000\003\340\000\000\000\000\377\000\000\000"
 658      E0000000 
 658      00FF0000 
 658      00
 659 020f 00000000 		.ascii	"\000\000\000\000\000\000\003\340\000\000\000\000\377"
 659      000003E0 
 659      00000000 
 659      FF
 660 021c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\360\000\000"
 660      00000000 
 660      0001F000 
 660      00
 661 0229 0001FF00 		.ascii	"\000\001\377\000\000\000\000\000\000\000\000\000\000"
 661      00000000 
 661      00000000 
 661      00
 662 0236 F0000000 		.ascii	"\360\000\000\000\001\377\000\000\000\000\000\000\000"
 662      01FF0000 
 662      00000000 
 662      00
 663 0243 000000F8 		.ascii	"\000\000\000\370\000\000\000\001\377\000\000\000\000"
 663      00000001 
 663      FF000000 
 663      00
 664 0250 00000000 		.ascii	"\000\000\000\000\000\000|\000\000\000\003\377\000\000"
 664      00007C00 
 664      000003FF 
 664      0000
 665 025e 00000000 		.ascii	"\000\000\000\000\000\000\000\000>\000\000\000\003\377"
 665      00000000 
 665      3E000000 
 665      03FF
 666 026c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\037\000\000"
 666      00000000 
 666      00001F00 
 666      00
 667 0279 0007FF00 		.ascii	"\000\007\377\000\000\000\000\000\000\000\000\000\000"
 667      00000000 
 667      00000000 
 667      00
 668 0286 1FC00000 		.ascii	"\037\300\000\000\017\377\200\000\000\000\000\000\000"
 668      0FFF8000 
 668      00000000 
 668      00
 669 0293 0000000F 		.ascii	"\000\000\000\017\360\000\000\037\377\200\000\000\000"
ARM GAS  /tmp/ccA1fUEE.s 			page 24


 669      F000001F 
 669      FF800000 
 669      00
 670 02a0 00000000 		.ascii	"\000\000\000\000\000\000\007\377\200\000\377\377\200"
 670      000007FF 
 670      8000FFFF 
 670      80
 671 02ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\003\377\376\037"
 671      00000000 
 671      0003FFFE 
 671      1F
 672 02ba FFFF8000 		.ascii	"\377\377\200\000\000\000\000\000\000\000\000\000\001"
 672      00000000 
 672      00000000 
 672      01
 673 02c7 FFFFFFFF 		.ascii	"\377\377\377\377\377\200\000\000\000\000\000\000\000"
 673      FF800000 
 673      00000000 
 673      00
 674 02d4 000000FF 		.ascii	"\000\000\000\377\377\377\377\377\200\000\000\000\000"
 674      FFFFFFFF 
 674      80000000 
 674      00
 675 02e1 00000000 		.ascii	"\000\000\000\000\000\000\177\377\377\377\377\200\000"
 675      00007FFF 
 675      FFFFFF80 
 675      00
 676 02ee 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000?\377\377\377\377"
 676      00000000 
 676      003FFFFF 
 676      FFFF
 677 02fc 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\017\377"
 677      00000000 
 677      0000000F 
 677      FF
 678 0309 FFFFFF80 		.ascii	"\377\377\377\200\000\000\000\000\000\000\000\000\000"
 678      00000000 
 678      00000000 
 678      00
 679 0316 0007FFFF 		.ascii	"\000\007\377\377\377\377\200\000\000\000\000\000\000"
 679      FFFF8000 
 679      00000000 
 679      00
 680 0323 00000000 		.ascii	"\000\000\000\000\001\377\377\377\377\200\000\000\000"
 680      01FFFFFF 
 680      FF800000 
 680      00
 681 0330 00000000 		.ascii	"\000\000\000\000\000\000\000\000\177\377\377\377\000"
 681      00000000 
 681      7FFFFFFF 
 681      00
 682 033d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\037\377"
 682      00000000 
 682      0000001F 
 682      FF
 683 034a FFFF0000 		.ascii	"\377\377\000\000\000\000\000\000\000\000\000\000\000"
 683      00000000 
ARM GAS  /tmp/ccA1fUEE.s 			page 25


 683      00000000 
 683      00
 684 0357 0003FFFF 		.ascii	"\000\003\377\377\377\000\000\000\000\000\000\000\000"
 684      FF000000 
 684      00000000 
 684      00
 685 0364 00000000 		.ascii	"\000\000\000\000\000\000\003\377\000\000\000\000\000"
 685      000003FF 
 685      00000000 
 685      00
 686 0371 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000?\000\000\000"
 686      00000000 
 686      00003F00 
 686      0000
 687 037f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\002"
 687      00000000 
 687      00000000 
 687      02
 688 038c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 688      00000000 
 688      00000000 
 688      00
 689 0399 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 689      00000000 
 689      00000000 
 689      00
 690 03a6 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 690      00000000 
 690      00000000 
 690      00
 691 03b3 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 691      00000000 
 691      00000000 
 691      00
 692 03c0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 692      00000000 
 692      00000000 
 692      00
 693 03cd 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 693      00000000 
 693      00000000 
 693      00
 694 03da 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 694      00000000 
 694      00000000 
 694      00
 695 03e7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 695      00000000 
 695      00000000 
 695      00
 696 03f4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000"
 696      00000000 
 696      00000000 
 697              		.section	.rodata.mata_merem,"a"
 698              		.align	2
 701              	mata_merem:
 702 0000 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
ARM GAS  /tmp/ccA1fUEE.s 			page 26


 702      00000000 
 702      00000000 
 702      00
 703 000d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 703      00000000 
 703      00000000 
 703      00
 704 001a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 704      00000000 
 704      00000000 
 704      00
 705 0027 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 705      00000000 
 705      00000000 
 705      00
 706 0034 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 706      00000000 
 706      00000000 
 706      00
 707 0041 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 707      00000000 
 707      00000000 
 707      00
 708 004e 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 708      00000000 
 708      00000000 
 708      00
 709 005b 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 709      00000000 
 709      00000000 
 709      00
 710 0068 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\020\000"
 710      00000000 
 710      00000010 
 710      00
 711 0075 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 711      00000000 
 711      00000000 
 711      00
 712 0082 00180000 		.ascii	"\000\030\000\000\000\000\000\000\000\000\000\000\000"
 712      00000000 
 712      00000000 
 712      00
 713 008f 00000000 		.ascii	"\000\000\000\000\034\000\000\000\000\002\000\000\000"
 713      1C000000 
 713      00020000 
 713      00
 714 009c 00000000 		.ascii	"\000\000\000\000\000\000\000\036\000\000\000\000\003"
 714      0000001E 
 714      00000000 
 714      03
 715 00a9 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000>\000\000\000"
 715      00000000 
 715      00003E00 
 715      0000
 716 00b7 0007C000 		.ascii	"\000\007\300\000\000\000\000\000\000\000\000\000<\000"
 716      00000000 
ARM GAS  /tmp/ccA1fUEE.s 			page 27


 716      00000000 
 716      3C00
 717 00c5 00000007 		.ascii	"\000\000\000\007\360\000\000\000\000\000\000\000\000"
 717      F0000000 
 717      00000000 
 717      00
 718 00d2 003C0000 		.ascii	"\000<\000\000\000\000\001\374\000\000\000\000\000\000"
 718      000001FC 
 718      00000000 
 718      0000
 719 00e0 0000003E 		.ascii	"\000\000\000>\000\000\000\000\000\376\000\000\000\000"
 719      00000000 
 719      00FE0000 
 719      0000
 720 00ee 00000000 		.ascii	"\000\000\000\000\000\177\200\000\000\000\000?\200\000"
 720      007F8000 
 720      0000003F 
 720      8000
 721 00fc 00000000 		.ascii	"\000\000\000\000\000\000\000\177\340\000\000\000\000"
 721      0000007F 
 721      E0000000 
 721      00
 722 0109 0FE00000 		.ascii	"\017\340\000\000\000\000\000\000\000\000{\360\000\000"
 722      00000000 
 722      00007BF0 
 722      0000
 723 0117 000007F0 		.ascii	"\000\000\007\360\000\000\000\000\000\000\000\000x\374"
 723      00000000 
 723      00000000 
 723      78FC
 724 0125 00000000 		.ascii	"\000\000\000\000\001\360\000\000\000\000\000\000\000"
 724      01F00000 
 724      00000000 
 724      00
 725 0132 00787F00 		.ascii	"\000x\177\000\000\000\000\000p\000\000\000\000\000\000"
 725      00000000 
 725      70000000 
 725      000000
 726 0141 0000301F 		.ascii	"\000\0000\037\200\000\000\000\000 \000\000\000\000\000"
 726      80000000 
 726      00200000 
 726      000000
 727 0150 00000010 		.ascii	"\000\000\000\020\007\340\000\000\000\000\000\000\000"
 727      07E00000 
 727      00000000 
 727      00
 728 015d 00000000 		.ascii	"\000\000\000\000\000\000\000\003\370\000\000\000\000"
 728      00000003 
 728      F8000000 
 728      00
 729 016a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\376\000"
 729      00000000 
 729      000000FE 
 729      00
 730 0177 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 730      00000000 
 730      00000000 
ARM GAS  /tmp/ccA1fUEE.s 			page 28


 730      00
 731 0184 003F0000 		.ascii	"\000?\000\000\000\000\000\000\000\000\000\000\000\000"
 731      00000000 
 731      00000000 
 731      0000
 732 0192 0000000F 		.ascii	"\000\000\000\017\300\000\000\000\000\000\000\000\000"
 732      C0000000 
 732      00000000 
 732      00
 733 019f 00000000 		.ascii	"\000\000\000\000\000\000\007\360\000\000\000\000\000"
 733      000007F0 
 733      00000000 
 733      00
 734 01ac 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\001\370\000\000"
 734      00000000 
 734      0001F800 
 734      00
 735 01b9 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 735      00000000 
 735      00000000 
 735      00
 736 01c6 7E000000 		.ascii	"~\000\000\000\000\000\000\000\000\000\000\000\000\000"
 736      00000000 
 736      00000000 
 736      0000
 737 01d4 00003F80 		.ascii	"\000\000?\200\000\000\000\000\000\000\000\000\000\000"
 737      00000000 
 737      00000000 
 737      0000
 738 01e2 00000000 		.ascii	"\000\000\000\000\017\340\000\000\000\000\000\000\000"
 738      0FE00000 
 738      00000000 
 738      00
 739 01ef 00000000 		.ascii	"\000\000\000\000\000\000\000\003\360\000\000\000\000"
 739      00000003 
 739      F0000000 
 739      00
 740 01fc 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\001\374\000"
 740      00000000 
 740      000001FC 
 740      00
 741 0209 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 741      00000000 
 741      00000000 
 741      00
 742 0216 007F0000 		.ascii	"\000\177\000\000\000\000\000\000\000\000\000\000\000"
 742      00000000 
 742      00000000 
 742      00
 743 0223 00000000 		.ascii	"\000\000\000\000\037\200\000\000\000\000\000\000\000"
 743      1F800000 
 743      00000000 
 743      00
 744 0230 00000000 		.ascii	"\000\000\000\000\000\000\000\007\340\000\000\000\000"
 744      00000007 
 744      E0000000 
 744      00
ARM GAS  /tmp/ccA1fUEE.s 			page 29


 745 023d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\003\370\000"
 745      00000000 
 745      000003F8 
 745      00
 746 024a 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 746      00000000 
 746      00000000 
 746      00
 747 0257 00FE0000 		.ascii	"\000\376\000\000\000\000\000\000\000\000\000\000\000"
 747      00000000 
 747      00000000 
 747      00
 748 0264 00000000 		.ascii	"\000\000\000\000?\000\000\000\000\000\000\000\000\000"
 748      3F000000 
 748      00000000 
 748      0000
 749 0272 00000000 		.ascii	"\000\000\000\000\000\000\037\300\000\000\000\000\000"
 749      00001FC0 
 749      00000000 
 749      00
 750 027f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\007\360\000\000"
 750      00000000 
 750      0007F000 
 750      00
 751 028c 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\001"
 751      00000000 
 751      00000000 
 751      01
 752 0299 F8000000 		.ascii	"\370\000\000\000\000\000\000\000\000\000\000\000\000"
 752      00000000 
 752      00000000 
 752      00
 753 02a6 0000007E 		.ascii	"\000\000\000~\000\000\000\000\000\000\000\000\000\000"
 753      00000000 
 753      00000000 
 753      0000
 754 02b4 00000000 		.ascii	"\000\000\000\000\000?\200\000\000\000\000\000\000\000"
 754      003F8000 
 754      00000000 
 754      0000
 755 02c2 00000000 		.ascii	"\000\000\000\000\000\000\000\017\340\000\000\000\000"
 755      0000000F 
 755      E0000000 
 755      00
 756 02cf 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\003\360\000"
 756      00000000 
 756      000003F0 
 756      00
 757 02dc 80000000 		.ascii	"\200\000\000\000\000\000\000\000\000\000\000\000\000"
 757      00000000 
 757      00000000 
 757      00
 758 02e9 01FC0180 		.ascii	"\001\374\001\200\000\000\000\000\000\000\000\000\000"
 758      00000000 
 758      00000000 
 758      00
 759 02f6 00000000 		.ascii	"\000\000\000\000\177\001\300\000\000\000\000\000\000"
ARM GAS  /tmp/ccA1fUEE.s 			page 30


 759      7F01C000 
 759      00000000 
 759      00
 760 0303 00000000 		.ascii	"\000\000\000\000\000\000\000\037\201\340\000\000\000"
 760      0000001F 
 760      81E00000 
 760      00
 761 0310 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\007\341\340"
 761      00000000 
 761      000007E1 
 761      E0
 762 031d 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 762      00000000 
 762      00000000 
 762      00
 763 032a 03F9E000 		.ascii	"\003\371\340\000\000\000\000\000\000\000\000\000\000"
 763      00000000 
 763      00000000 
 763      00
 764 0337 00000000 		.ascii	"\000\000\000\000\377\340\000\000\000\000\000\000\000"
 764      FFE00000 
 764      00000000 
 764      00
 765 0344 00000000 		.ascii	"\000\000\000\000\000\000\000?\300\000\000\000\000\000"
 765      0000003F 
 765      C0000000 
 765      0000
 766 0352 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\037\300\000\000"
 766      00000000 
 766      001FC000 
 766      00
 767 035f 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\007"
 767      00000000 
 767      00000000 
 767      07
 768 036c C0000000 		.ascii	"\300\000\000\000\000\000\000\000\000\000\000\000\000"
 768      00000000 
 768      00000000 
 768      00
 769 0379 000007C0 		.ascii	"\000\000\007\300\000\000\000\000\000\000\000\000\000"
 769      00000000 
 769      00000000 
 769      00
 770 0386 00000000 		.ascii	"\000\000\000\000\000\007\300\000\000\000\000\000\000"
 770      0007C000 
 770      00000000 
 770      00
 771 0393 00000000 		.ascii	"\000\000\000\000\000\000\000\000\003\200\000\000\000"
 771      00000000 
 771      03800000 
 771      00
 772 03a0 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\001\200"
 772      00000000 
 772      00000001 
 772      80
 773 03ad 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 773      00000000 
ARM GAS  /tmp/ccA1fUEE.s 			page 31


 773      00000000 
 773      00
 774 03ba 00018000 		.ascii	"\000\001\200\000\000\000\000\000\000\000\000\000\000"
 774      00000000 
 774      00000000 
 774      00
 775 03c7 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 775      00000000 
 775      00000000 
 775      00
 776 03d4 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 776      00000000 
 776      00000000 
 776      00
 777 03e1 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 777      00000000 
 777      00000000 
 777      00
 778 03ee 00000000 		.ascii	"\000\000\000\000\000\000\000\000\000\000\000\000\000"
 778      00000000 
 778      00000000 
 778      00
 779 03fb 00000000 		.ascii	"\000\000\000\000\000"
 779      00
 780              		.text
 781              	.Letext0:
 782              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 783              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 784              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 785              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 786              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 787              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 788              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 789              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 790              		.file 11 "Core/Inc/ssd1306.h"
 791              		.file 12 "Core/Inc/bitmap.h"
 792              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 793              		.file 14 "/usr/include/newlib/stdio.h"
 794              		.file 15 "/usr/include/newlib/string.h"
 795              		.file 16 "<built-in>"
ARM GAS  /tmp/ccA1fUEE.s 			page 32


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccA1fUEE.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccA1fUEE.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccA1fUEE.s:89     .text.MX_GPIO_Init:0000000000000040 $d
     /tmp/ccA1fUEE.s:94     .text.Error_Handler:0000000000000000 $t
     /tmp/ccA1fUEE.s:101    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccA1fUEE.s:133    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccA1fUEE.s:139    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccA1fUEE.s:197    .text.MX_I2C1_Init:000000000000002c $d
     /tmp/ccA1fUEE.s:204    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccA1fUEE.s:210    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccA1fUEE.s:265    .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccA1fUEE.s:271    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccA1fUEE.s:278    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccA1fUEE.s:383    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccA1fUEE.s:390    .text.main:0000000000000000 $t
     /tmp/ccA1fUEE.s:397    .text.main:0000000000000000 main
     /tmp/ccA1fUEE.s:533    .text.main:00000000000000b8 $d
     /tmp/ccA1fUEE.s:600    .data.EndMSG:0000000000000000 EndMSG
     /tmp/ccA1fUEE.s:612    .data.StartMSG:0000000000000000 StartMSG
     /tmp/ccA1fUEE.s:606    .data.Space:0000000000000000 Space
     /tmp/ccA1fUEE.s:558    .bss.Buffer:0000000000000000 Buffer
     /tmp/ccA1fUEE.s:572    .bss.data_memori:0000000000000000 data_memori
     /tmp/ccA1fUEE.s:565    .bss.Data_Read:0000000000000000 Data_Read
     /tmp/ccA1fUEE.s:593    .data.Data_Write:0000000000000000 Data_Write
     /tmp/ccA1fUEE.s:586    .bss.huart1:0000000000000000 huart1
     /tmp/ccA1fUEE.s:579    .bss.hi2c1:0000000000000000 hi2c1
     /tmp/ccA1fUEE.s:701    .rodata.mata_merem:0000000000000000 mata_merem
     /tmp/ccA1fUEE.s:618    .rodata.mata_melek:0000000000000000 mata_melek
     /tmp/ccA1fUEE.s:555    .bss.Buffer:0000000000000000 $d
     /tmp/ccA1fUEE.s:561    .bss.Data_Read:0000000000000000 $d
     /tmp/ccA1fUEE.s:568    .bss.data_memori:0000000000000000 $d
     /tmp/ccA1fUEE.s:575    .bss.hi2c1:0000000000000000 $d
     /tmp/ccA1fUEE.s:582    .bss.huart1:0000000000000000 $d
     /tmp/ccA1fUEE.s:589    .data.Data_Write:0000000000000000 $d
     /tmp/ccA1fUEE.s:597    .data.EndMSG:0000000000000000 $d
     /tmp/ccA1fUEE.s:603    .data.Space:0000000000000000 $d
     /tmp/ccA1fUEE.s:609    .data.StartMSG:0000000000000000 $d
     /tmp/ccA1fUEE.s:615    .rodata.mata_melek:0000000000000000 $d
     /tmp/ccA1fUEE.s:698    .rodata.mata_merem:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_I2C_Init
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
HAL_I2C_Mem_Write
HAL_I2C_Mem_Read
sprintf
strlen
HAL_UART_Transmit
